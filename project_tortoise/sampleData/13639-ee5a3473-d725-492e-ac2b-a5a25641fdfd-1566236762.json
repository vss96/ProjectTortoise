{"author_flair_text":null,"author":"kawa","edited":false,"id":"ctz0t","parent_id":"t1_ctxn6","gilded":0,"distinguished":null,"retrieved_on":1473807986,"body":"If I read a program I don't think in lines or statements but more in 'building-blocks' or 'patterns'. For example if I read \r\n\r\n    map list \\e -&gt; ...\r\n\r\nI think and remember \"an iteration over 'list\". But I think the same if I see\r\n\r\n    for(Element e: list) {\r\n     ...\r\n    }\r\n\r\nor even \r\n\r\n    for(int i = 0; i &lt; list.size(); i++) {\r\n       Element e = list.get(i);\r\n       ...\r\n    }\r\n\r\nThe last one is dangerous because if someone wrote 'i--' instead of 'i++' I would probably miss it. This is the real advantage of abstractions: Even if I'm able to do 'pattern matching' and read multi-line constructs as fast as a single line one, this creates the risk of missing subtle bugs or differences to the well known patterns. This won't happen with the first two examples because they give no room for customization.\r\n\r\nOTOH: As long as everything goes right, even the last implementation doesn't take me more time to read or takes more 'brainspace' to remember than the first one.\r\n\r\nThis is similar to natural language: If you read 'programming language' your short term memory remembers the *concept*, not the 19 letters required to *name the concept*. If we create a new word, for example 'pla' for the same concept, for sure it would be faster to write - but it is really faster to read and more easy to remember? I doubt that.\r\n","controversiality":0,"subreddit_id":"t5_2fwo","link_id":"t3_twtt","stickied":false,"subreddit":"programming","score":19,"ups":19,"author_flair_css_class":null,"created_utc":1165496521,"timestamp_epoch":1566236762,"message_id":"13639-ee5a3473-d725-492e-ac2b-a5a25641fdfd-1566236762"}