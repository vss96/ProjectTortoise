{"distinguished":null,"retrieved_on":1473809134,"gilded":0,"parent_id":"t3_viqs","edited":false,"id":"cvnqm","author":"djspray","author_flair_text":null,"score":1,"ups":1,"author_flair_css_class":null,"created_utc":1166725796,"subreddit":"programming","subreddit_id":"t5_2fwo","link_id":"t3_viqs","stickied":false,"body":"In answer to the question:\r\n\r\n&gt;Why haven't you written a book about Haskell? The world needs a good introductory text. Go for it!\r\n\r\nMy answer is in parts. First,\r\n\r\n1. I would like to, but I don't know enough.\r\n\r\n1a. \"Knowing enough\" decomposes to:\r\n\r\n1aa. Gain a thorough knowledge of the Haskell syntax. I'm gaining that, but it is a bit slow, because the Haskell syntax is somewhat irregular and unusual, particularly for forms that use whitespace for semantics, some of which seem kind of ugly, and also due to precedence of functional application above all else, which sometimes results in obscure error messages when you're expressing something you didn't intend.\r\n\r\n1ab. Gain a thorough knowledge of the Haskell library. In progress, but this is somewhat slow as well, because although basic library functions like foldl may seem simple enough to undrstand, really using them as designed requires that I...\r\n\r\n1ac. Gain a thorough knowledge of Haskell idiom. This also comes slowly, because it involves studying real-world programs, and also requires that I...\r\n\r\n1ad. Gain a thorough knowledge of the functional programming approach. The \"functional programming approach\" is bigger than just a set of idioms, this is a major Kuhnian paradigm shift, a sea change for programmers who have come of age writing imperative programs and thinking about their problems in terms of memory addresses and pointers.\r\n\r\n2. I am working on the problem (the problem of \"knowing enough\") by writing a whole series of short articles and soliciting feedback on them; this is helping me with 1aa..1ad above. I have been doing this, in public, at http://praisecurseandrecurse.blogspot.com. In doing so, I am proudly displaying my ignorance and then gradually refining that ignorance into something resembling knowledge. I have been very happy to receive great suggestions and in particular all of the feedback has been encouraging, as in \"that's neat, but why don't you do it like this,\" as opposed to what I first feared, which is \"you're stupid, and your program is stupid too; you obviously don't have a Ph.D. in computer science and ten years of postdoctoral work in programming language design; I bet you haven't even made it through MacLane's book on category theory, so go away, cretin.\" This brings me to...\r\n\r\n3. Haskellers are often _intimidating_. They have been quite friendly, and I am happy to say that they seem to be a slightly more congenial species than Smug Lisp Weenies, but it is perhaps understandable that C++ programmers who have perhaps dabbled in Perl or Python or Ruby but who want to use something safer and cleaner might find themselves running away screaming after attempting to understand monads and comonads and arrows.\r\n\r\nAnyway, it is a great question. I definitely hope someone will write Practical Haskell, along the lines of the excellent Practical Common Lisp. I can't promise it will be me, but I do have hopes that when I've learned a bit more, the writing I've been doing about Haskell can be refined and polished and perhaps transmuted into something at least resembling an introductory text. Will I be able to get a big book advance and quit my day job to work on this project? It seems unlikely, but perhaps that day will come.\r\n","controversiality":0,"timestamp_epoch":1566236774,"message_id":"43801-87c76671-0abd-4f3a-91df-0b3fca763849-1566236774"}