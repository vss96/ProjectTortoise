{"author_flair_text":null,"author":"nostrademons","id":"cus08","parent_id":"t1_curbq","edited":false,"gilded":0,"distinguished":null,"retrieved_on":1473808528,"body":"&gt; Especially when refactoring, I spend too much time reindenting and thinking if I got the precedence right.\r\n\r\nYou can avoid that by breaking a few of the suggested coding conventions.  I always format my code like this:\r\n\r\n    main = do\r\n        args ≺- getArgs\r\n        file ≺- openFile (args !! 0) ReadMode\r\n        text ≺- hGetContents file\r\n        putStrLn $ process text\r\n      where\r\n        process [] = []\r\n        process (x : xs) =\r\n          if x == 'e'\r\n            then \"ooga\" ++ process xs\r\n            else x : process xs\r\n\r\nThis way, I can change any of the line lengths and it won't break the layout.  It's a little annoying not using Emacs, but I never liked that program much anyway.  If I knew more ELisp I'd do an Emacs mode that formatted like this.\r\n\r\n(Actually, I'd probably write the do-block as `getArgs &gt;&gt;= flip openFile ReadMode . (!! 0) &gt;&gt;= hGetContents &gt;&gt;= putStrLn . process`.  But that wouldn't demonstrate the formatting very well.)","controversiality":0,"subreddit_id":"t5_2fwo","link_id":"t3_uqo3","stickied":false,"subreddit":"programming","ups":4,"score":4,"author_flair_css_class":null,"created_utc":1166113014,"timestamp_epoch":1566236768,"message_id":"28168-0c117041-4da5-4dea-b86d-7ec80b2e273b-1566236768"}