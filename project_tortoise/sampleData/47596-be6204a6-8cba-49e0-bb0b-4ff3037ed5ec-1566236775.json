{"edited":false,"id":"cvv2m","parent_id":"t1_cvukt","author_flair_text":null,"author":"jlouis8","retrieved_on":1473809274,"distinguished":null,"gilded":0,"link_id":"t3_vrah","stickied":false,"subreddit_id":"t5_2fwo","controversiality":0,"body":"Scheme is _extremely_ hard to compile to efficiency. None of the scheme compilers that produces fast code are trivial. The problem amounts to bridging the dynamic-language barrier: If you can't decide the type at compile time, you must decide run-time. This will cost cycles. Especially because a simple term like (+) would need to check its parameters before applying.\r\n\r\nAnd there, the tricks begin. You need some hard flow-analysis to do this. Or you need program specialization techniques.\r\n\r\nOcaml and C++ doesn't have these problems because a program is only \"valid\" if it typechecks.\r\n\r\nEven then, PLT scheme is one of the slower schemes out there. Its force is the flexibility of the language; not sheer calculation speed. And for a 8-queens problem where you brute-force the solutions, you can't afford type-discovery at run-time.\r\n","author_flair_css_class":null,"created_utc":1166900288,"score":2,"ups":2,"subreddit":"programming","timestamp_epoch":1566236775,"message_id":"47596-be6204a6-8cba-49e0-bb0b-4ff3037ed5ec-1566236775"}