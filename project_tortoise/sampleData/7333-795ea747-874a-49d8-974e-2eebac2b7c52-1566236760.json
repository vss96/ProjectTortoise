{"stickied":false,"link_id":"t3_tif6","subreddit_id":"t5_2fwo","body":"`flatten` is more like scaffolding than a nail.\r\n\r\nUnlike fairly standardized things like `list.sort` and `str.join`, there is nearly endless case-specific variation in deciding how `flatten` should work:  which kinds of iterable elements to descend into, how they should be traversed, what form their flattened result should take, and so on.  It might be possible to write Grand Unified flattener that's general enough to cover 90% of use cases or more, but it would probably be so cumbersome to parameterize that it would still be shorter to write a specialized flattener directly.\r\n\r\nMany and various `flatten` builtins have been proposed and shot down probably for as long as Python has been around:  for example, see the responses to [this recent python-dev message](http://mail.python.org/pipermail/python-dev/2006-September/thread.html#68941).","controversiality":0,"created_utc":1165262889,"author_flair_css_class":null,"score":6,"ups":6,"subreddit":"programming","id":"ctlk0","edited":false,"parent_id":"t1_ctjtg","author_flair_text":null,"author":"pjdelport","retrieved_on":1473807735,"distinguished":null,"gilded":0,"timestamp_epoch":1566236760,"message_id":"7333-795ea747-874a-49d8-974e-2eebac2b7c52-1566236760"}