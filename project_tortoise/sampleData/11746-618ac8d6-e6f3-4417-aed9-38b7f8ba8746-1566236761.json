{"retrieved_on":1473807907,"distinguished":null,"gilded":0,"id":"cturp","edited":false,"parent_id":"t1_ctub9","author":"ubernostrum","author_flair_text":null,"created_utc":1165424428,"author_flair_css_class":null,"score":4,"ups":4,"subreddit":"programming","stickied":false,"link_id":"t3_tsel","subreddit_id":"t5_2fwo","body":"&gt; Capistrano (automated deployment)\r\n\r\nNot really. Capistrano's pretty darned nice, though, and it's quite possible to use it with things that aren't Rails (I've done so and enjoyed the experience).\r\n\r\n&gt; Built-in testing (unit, functional, integration)\r\n\r\nYup. We hook into the standard Python `unittest` and `doctest` frameworks, with some nicer fixtures and test client (for sending HTTP requests and inspecting responses) under development. Docs are [here](http://www.djangoproject.com/documentation/testing/). Older (pre-0.95) versions of Django don't have the nice hooks for all of this, but Python's standard testing libs still work great.\r\n\r\n&gt; RJS\r\n\r\nNo, thank God ;)\r\n\r\n&gt; Plug-ins (My favorites- acts_as_authenticated, file_column, Markaby, Squirrel)\r\n\r\nNot by the exact same definition, since the architecture is different; with Django, the concept of \"application\" is somewhat analogous to the concept of \"plug-in\" or maybe \"engine\" in Rails -- you grab it, tell Django to install it, and start using it.","controversiality":0,"timestamp_epoch":1566236761,"message_id":"11746-618ac8d6-e6f3-4417-aed9-38b7f8ba8746-1566236761"}