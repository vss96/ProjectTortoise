{"parent_id":"t1_cu2ny","edited":false,"id":"cu3hj","author":"rmtew","author_flair_text":null,"retrieved_on":1473808069,"distinguished":null,"gilded":0,"stickied":false,"link_id":"t3_u2ng","subreddit_id":"t5_2fwo","body":"From what I read in [this post](http://www.defmacro.org/ramblings/concurrency.html) Erlang processes seem directly comparable to Stackless tasklets and channels if you ignore one having message passing concurrency and the other having shared state concurrency.\r\n\r\nAs pointed out, Erlang has a framework which takes advantage of this already (including whatever Mnesia is) where you would have to build it for Stackless.  In fact for Stackless you would have to be willing to write what you needed and know how to take advantage of Stackless to do so.\r\n\r\nI would say Erlang is unapproachable because it is Erlang and functional (and not Python) ;-) and Stackless is unapproachable because it is poorly documented and provides little existing code to take advantage of it.\r\n","controversiality":0,"created_utc":1165574019,"author_flair_css_class":null,"score":2,"ups":2,"subreddit":"programming","timestamp_epoch":1566236763,"message_id":"15720-d7c0077f-4a34-4f2c-913f-c86ac09a06a6-1566236763"}