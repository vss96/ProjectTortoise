{"subreddit":"programming","author_flair_css_class":null,"created_utc":1164943851,"score":1,"ups":1,"body":"Or in more real-world terms, it makes it too easy to mistype a variable name and end up with a syntactically valid program that does entirely the wrong thing.  You're not warned about these errors (well, maybe PyLint will); your program just gives wrong results.\r\n\r\nThis is probably my #1 bug in Python, PHP, and JavaEE's Unified Expression Language, ahead of all type errors, logic errors, and even state errors.  When you've been staring at code all day long, you won't notice that you're binding the new variable `situationsummary` instead of assigning to the existing variable `situationSummary`.  You'll just notice that somewhere, results are not happening.\r\n\r\nI woulda thought we'd learned our lesson with C's == vs. =, but evidently not.  Programming languages should not be vulnerable to typographic errors.\r\n\r\n(I should probably add that the problem is not as bad in Python as in PHP or JavaUEL, because an *access* to an unbound variable is an error in Python, while it gives something usable yet nonsensicaly like \"\" or 0 in PHP or JavaUEL.  Most mistypings are accesses.  Assignments are more visible (always on the left side), and repeated assignments to a single variable usually involve compound operators like +=, which will throw an error if unbound.  My claim of \"most common error\" applies to all my PHP/Python/JavaUEL program errors combined, not just the Python.  However, I still think it's brain-dead to incorporate a language feature that gives a different-but-still-valid program on a one-keystroke error.  Yes, this applies to = vs == too.)","controversiality":0,"link_id":"t3_t1qf","stickied":false,"subreddit_id":"t5_2fwo","gilded":0,"retrieved_on":1473807455,"distinguished":null,"author_flair_text":null,"author":"nostrademons","edited":false,"parent_id":"t1_ct6e4","id":"ct6nm","timestamp_epoch":1566236758,"message_id":"448-31627751-2254-4bd9-b9ca-c43b9e90b85d-1566236758"}