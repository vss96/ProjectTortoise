{"body":"An interesting article -- how does this compare with the default behavior by many of the Haskell features?\r\n\r\nAnyway, there is also \"earnest\" evaluation, which is something I've used from time to time in statistical analysis of large amounts of data. The simplest example might be to (when you know for *certain* that you want the count and sum of the entries!) continually update the sum and count when adding an additional data point. This way you don't have to then again iterate through a (potentially large -- e.g. millions of entries) to get the count and sum for the later derivative operations (e.g. mean, etc.). Not something you would want to do necessarily in a general purpose list, but when you're writing a data structure for a particularly specific need, either lazy or earnest (or even a combination of both) might be the order of the day.\r\n\r\nAlso, a caveat: some things are *not* good to try to use lazy evaluation to compute -- for example, using a lazy call to \"getTimeOfDay\" in a \"getStartTime\" function for your data point is not going to be a very good idea!","controversiality":0,"subreddit_id":"t5_2fwo","link_id":"t3_vdxw","stickied":false,"subreddit":"programming","ups":2,"score":2,"author_flair_css_class":null,"created_utc":1166557182,"author":"sblinn","author_flair_text":null,"id":"cvebe","edited":false,"parent_id":"t3_vdxw","gilded":0,"distinguished":null,"retrieved_on":1473808950,"timestamp_epoch":1566236773,"message_id":"39074-42a7c94a-3406-4d53-af3a-60213dd7ef6f-1566236773"}