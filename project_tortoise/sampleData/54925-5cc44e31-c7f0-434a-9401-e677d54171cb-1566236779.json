{"gilded":0,"distinguished":null,"retrieved_on":1473809541,"author":"[deleted]","author_flair_text":null,"edited":false,"id":"cw958","parent_id":"t1_cw907","subreddit":"programming","score":3,"ups":3,"author_flair_css_class":null,"created_utc":1167317968,"body":"Well, yes and no. I have no idea what kind of programming are you doing in Java. Number crunching? Then probably Java will be faster (if you use 4-byte floats it can - at least theoretically - merge ops into nice SIMD instructions and kick ass). Multithreaded apps? Database? Probably answers will differ. Then their is a coding style issue - I mean, you can code \"Java-in-Python\" (as Python has roughly superset of Java language features), but you cannot code \"Python-in-Java\" because Python is more dynamic and flexible. See the \"worthless case\" above for trivial example. In Java you may invent some \"crutches\" like passing data in strings etc (I don't have huge experience with Java but Delphi/C++ is roughly the same ballpark - they are all VMT-based OOP implementations with strict static typing and \"primitive\" types, like int, float etc. Not everything is an object and not everything is interchangeable. That's for starters.). What I'm saying here is that such \"workaround\" can and will impede overall program speed, so if you want to compare program speed here, write a program in Python in pythonic way and _then_ translate it to Java. Inverse is not quite fair.\r\n\r\nBut ok - I should say now that I *do* have an issue with Psyco. I can live with it but it itches. Namely - it's \"memory leaking\". Not in classic sense, but if you use stuff like module reloading or a couple of other techniques (I suppose if you periodically introduce new Python code in your program while it's running - pretty possible with Python) then it seems that Psyco compiled chunks accumulate. I tried submitting it to Psyco's issue tracker and got \"known issue - won't be resolved\". I suppose it's a toughy and/or serious performance issue to track it. I dunno - maybe they could've used some garbage collector for it. The only real-world kinda problem with it that I had is in threaded TCP server apps and psyco.profile() mode (the semi-solution for me was using psyco.background() mode). \r\n\r\nAlso - beware of using Psyco in multithreaded Python apps! It apparently overrides Python's GIL so you have to be much more careful in accessing globals etc. You may get the impression that Psyco is buggy but in fact your program was. It was just that Python's GIL was masking it. \r\nOTOH - you can really benefit from SMP!\r\n\r\nAs for the \"interesting data point\" - their examples are a bit lame (EG: including Fib(3) benchmark in \"recursive\", bleh - at least they could've tried making benchmark parts of equal scale) and then you should try the latest Psyco - they have done some work on it during - I believe - this year.\r\n\r\nPS: Oh, and BTW - on most benchmarks Java VM consistenly matches or beats(!) optimized C++ code. That's pretty funny actually, but I really like the trend - high level languages obtain cool optimizers and beat low-level ones! OTOH - few would claim that your average real-world Java program is faster than your average real-world C++ program. Because memory consumption, cache pollution, number-of-layers-in-given-arch, etc issues show up, I guess.\r\n\r\nPPS: Phew - that was surely my longest reddit post :)\r\n\r\nEDIT: Bahh!! Mandelbrot - the benchmark when Java beats Psyco bluest - they used old-style class there and Psyco's manual specifically states that it does not optimize those (should've used \"class mandelbrot(object)\" - that would make it a new-style class). Also note that Psyco does not optimize module-level code, only stuff within def()'s. Use def main()... main())","controversiality":0,"subreddit_id":"t5_2fwo","link_id":"t3_w4aj","stickied":false,"timestamp_epoch":1566236779,"message_id":"54925-5cc44e31-c7f0-434a-9401-e677d54171cb-1566236779"}