{"subreddit":"programming","score":2,"ups":2,"created_utc":1165356347,"author_flair_css_class":null,"body":"Neither (.), nor cons are new syntax though, they're just functions defined in the Prelude as:\r\n\r\n    (.)   :: (b -&gt; c) -&gt; (a -&gt; b) -&gt; a -&gt; c\r\n    (.) f g x = f (g x)\r\n\r\nand\r\n\r\n    data [] a = [] | a : [a]\r\n\r\nI take your point on being definable in terms of the core language though: that is the important issue -- if you're adding new syntax its much better to define it via translation to the language core, and even better to define it in a library (if you can).\r\n\r\nA small nitpick: the core Haskell language is actually:\r\n\r\n    let v = e1 in e2        -- thunk allocation\r\n    case e1 of pat -&gt; alt   -- pattern matching\r\n    f x                     -- application\r\n    \\x -&gt; f x               -- abstraction\r\n\r\nwith a few other things like types thrown in ;-)\r\nEverthing else is defined in terms of these forms.","controversiality":0,"subreddit_id":"t5_2fwo","stickied":false,"link_id":"t3_to4r","gilded":0,"distinguished":null,"retrieved_on":1473807839,"author_flair_text":null,"author":"dons","id":"ctr69","edited":false,"parent_id":"t1_ctpoh","timestamp_epoch":1566236761,"message_id":"10003-65559603-c936-4030-ba50-38ba4655eb64-1566236761"}