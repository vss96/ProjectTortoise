{"controversiality":0,"body":"&gt;So... Every time I call a function that indicates failure in such a way, before I use the result, I have to check if the result really is the result or an error?\r\n\r\nInstead, you use [monads](http://www.nomaware.com/monads/html/index.html) to do the checking for you...\r\n\r\n    import Control.Monad\r\n\r\n    main = do let tests  = [(Just 1, Just 0, Just (-2)),\r\n                            (Just 0, Just 0, Just 0), --divide by zero\r\n                            (Just 1, Just 1, Just 1)] --negative sqrt \r\n              print $ map quadratic tests \r\n\r\n    -- Look, nothing specialized to check for error (Nothing) conditions \r\n    quadratic (a,b,c) = (root1,root2)\r\n      where disc  = b*b - 4*a*c\r\n            root1 = (-b) + (sqrt disc)/(2 * a)\r\n            root2 = (-b) - (sqrt disc)/(2 * a)\r\n              \r\n    -- Here's where we do all the behind the scenes stuff\r\n    -- Addition, subtraction and multiplication all work without problems\r\n    instance Num a =&gt; Num (Maybe a) where\r\n        (+) = liftM2 (+)\r\n        (-) = liftM2 (-)\r\n        (*) = liftM2 (*)\r\n        fromInteger = Just . fromIntegral\r\n       \r\n    -- Return \"Nothing\" in case of divide by zero\r\n    instance Fractional a =&gt; Fractional (Maybe a) where\r\n        (/) a (Just 0) = Nothing\r\n        (/) a  b       = liftM2 (/) a b\r\n        \r\n    -- Return \"Nothing\" when taking the square root of a negative number\r\n    instance (Floating a, Ord a) =&gt; Floating (Maybe a) where\r\n        sqrt (Just x)  = if x&lt;0 then Nothing else Just (sqrt x)\r\n\r\n\r\n\r\n","stickied":false,"link_id":"t3_u1h2","subreddit_id":"t5_2fwo","subreddit":"programming","created_utc":1165592968,"author_flair_css_class":null,"score":3,"ups":3,"author":"sleepingsquirrel","author_flair_text":null,"id":"cu4jg","parent_id":"t1_cu3g1","edited":false,"gilded":0,"retrieved_on":1473808088,"distinguished":null,"timestamp_epoch":1566236763,"message_id":"16157-69bd66d9-23e6-48ff-895b-5c9fd157f3ea-1566236763"}