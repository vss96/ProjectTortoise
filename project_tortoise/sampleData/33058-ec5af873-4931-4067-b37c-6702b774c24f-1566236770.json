{"body":"But even in Haskell the abstraction had to be defined somewhere. Even if there are many abstractions build right into the standard prelude, they nonetheless are libs which had to be written by someone first.\r\n\r\nI totally agree that functional languages are better to provide reusable abstractions, because combining functions gives more reusability than combining data-structures like in OOP. But this don't takes away the requirement to create those abstractions at some time.\r\n\r\nWhile in Java the 'framework-itis' surly went a bit overboard, the basic idea of putting useful stuff into libraries really isn't bad. The problem is that in the Java world people seem to create to many frameworks. Frameworks are difficult to combine, so libraries provide better code reuse as long as they suffice. And I suspect, that Java could really benefit from a total redesign of it's core libraries (but thats of course impossible now).\r\n\r\nThe real strength of Haskell is NOT to write code in a concise form, its the ability to combine existing code in a much better way than most other languages allow. But to benefit from this feature you first need the code you can combine.\r\n","controversiality":0,"subreddit_id":"t5_2fwo","link_id":"t3_uzuc","stickied":false,"subreddit":"programming","score":2,"ups":2,"author_flair_css_class":null,"created_utc":1166315196,"author_flair_text":null,"author":"kawa","id":"cv2f1","edited":false,"parent_id":"t1_cv2ct","gilded":0,"distinguished":null,"retrieved_on":1473808725,"timestamp_epoch":1566236770,"message_id":"33058-ec5af873-4931-4067-b37c-6702b774c24f-1566236770"}