{"id":"cw5nn","edited":false,"parent_id":"t3_w4pq","author":"jlrobins","author_flair_text":null,"distinguished":null,"retrieved_on":1473809475,"gilded":0,"subreddit_id":"t5_2fwo","stickied":false,"link_id":"t3_w4pq","controversiality":0,"body":"He seems to be missing a great vast truth right in front of his eyes -- relational db technology is a well known, time tested and stable technology which has proved its worth time and time again. In comparison, XML, REST, XMLRPC, SOAP, Rails, etc. are all fly-by-night and potentially dust in the wind.\r\n\r\nData, constraints, checks, etc. stored in your RDBMS is poised to live well beyond the lifetime of any particular client application implementation. Lives beyond the language the client is written in. Lives beyond the particular O/R tech used in a client.\r\n\r\nAre those checks and constraints relatively unwieldy when phrased in db-parlance, compared to in your beautiful client language of choice? Yup. And seemingly redundant too, since your client app(s) will probably have to make the same client-side checks in order to yield beautiful context sensitive error messages. But having the DB stone-cold enforce the given assertions about your long-term data will save you again and again.\r\n\r\nIf you're in a project for the long haul, and you're going to live with this data for years, then good use of DB value-addedness will pay itself back many times.\r\n\r\nOur website is in its third middle-tier incarnation in 8 years -- php -&gt; java -&gt; python. Having those checks and balances in the DB makes for testing interop between the pair of implementations which must share the same data much more confidence inspiring.","score":14,"ups":14,"created_utc":1167234918,"author_flair_css_class":null,"subreddit":"programming","timestamp_epoch":1566236778,"message_id":"53068-14837f01-0bdc-4d4a-92fb-a640a717e8c4-1566236778"}