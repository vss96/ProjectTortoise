{"retrieved_on":1473809568,"distinguished":null,"gilded":0,"id":"cwakv","parent_id":"t1_cw8pc","edited":false,"author_flair_text":null,"author":"shit","author_flair_css_class":null,"created_utc":1167342286,"score":-1,"ups":-1,"subreddit":"programming","link_id":"t3_w4aj","stickied":false,"subreddit_id":"t5_2fwo","controversiality":0,"body":"&gt; I'm afraid you never needed to pass around methods because this is not useful in ruby, and it is not so useful as in python because you lack a decent syntax. \r\n\r\nIt's not needed so often in Ruby as in Python, because Python lacks anonymous functions (if you don't count lambda).\r\n\r\n&gt; I can't believe you never wrote something like\r\n\r\n&gt; `enum.each {|x| meth(x)}`\r\n\r\nIn the aforementioned project, 9 out of 308 invocations of `each`.\r\n\r\n&gt; With pythonish methods and unbound methods this could be\r\n\r\n&gt; `enum.each meth`\r\n\r\n&gt; and\r\n\r\n&gt; `ary.sort_by X.foo`\r\n\r\nExcept that you have to add a bunch of parens. It's a trade off. With \"pythonish methods\", e.g. attribute accessors would be `a.foo()` and `a.foo=(bar)` (and no, Python's messy attribute lookup is not desirable).","timestamp_epoch":1566236779,"message_id":"55609-a7ac8f21-feb4-4236-bafe-f72dcb2e7194-1566236779"}