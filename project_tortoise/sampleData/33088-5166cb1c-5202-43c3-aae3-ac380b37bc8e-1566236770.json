{"author_flair_css_class":null,"created_utc":1166316198,"score":4,"ups":4,"subreddit":"programming","link_id":"t3_uzuc","stickied":false,"subreddit_id":"t5_2fwo","body":"&gt; Haskell can be summed up in one page\r\n\r\nSure? With all those pattern matching, monads/do-notation, type classes etc.? I really doubt that. Haskell even has two different syntaxes for the basically same thing ('let' and 'where'). And consider the advanced 'magic' of features like 'derive'.\r\n\r\nThe Haskell standard has about 150 pages for the language and 100 pages for the standard libs. I'd hardly consider this as 'one page'.\r\n\r\nBut it's not really about the language standard, its about the execution model: In Java you can see how everything translates relative directly to the underlying execution model of the processor (even if not as directly as C for example). Haskell is much more abstract and thus requires a much more sophisticated compiler.\r\n\r\nBut this is not bad. On the contrary: If we want a language which is very powerful by giving more abstractions and more comfort to the programmer, it's quite plausible that such a language would also require a more complex compiler (and probably also a more complex language definition). So I simply wanted to make clear that the idea of 'simple is better' very often is nothing but a fallacy.\r\n","controversiality":0,"retrieved_on":1473808726,"distinguished":null,"gilded":0,"edited":false,"parent_id":"t1_cv2cx","id":"cv2gw","author":"kawa","author_flair_text":null,"timestamp_epoch":1566236770,"message_id":"33088-5166cb1c-5202-43c3-aae3-ac380b37bc8e-1566236770"}