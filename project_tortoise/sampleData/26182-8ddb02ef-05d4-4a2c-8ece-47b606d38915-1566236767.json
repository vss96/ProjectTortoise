{"distinguished":null,"retrieved_on":1473808445,"gilded":0,"parent_id":"t1_cuf8m","id":"cunej","edited":false,"author_flair_text":null,"author":"nostrademons","score":3,"ups":3,"created_utc":1165975154,"author_flair_css_class":null,"subreddit":"programming","subreddit_id":"t5_2fwo","stickied":false,"link_id":"t3_u719","controversiality":0,"body":"&gt; The fundamental theorem of structured programming, which was proved way back in the 60's, showed that programs written in a programming language whose sole control operator is conditional 'goto' can be faithfully translated into a structured programing language that has only 'if' and 'while' control-flow operators; note the absense of 'break' or 'continue'.\r\n\r\nI'd heard that, but there was an example in one of my compiler design that made me doubt it.  The example was basically one of crossed flowgraphs - the flow graph would look like (all edges are forward edges only, pointing downwards):\r\n\r\n              s1\r\n             /  \\\r\n            s2  s3\r\n            | \\/ |\r\n            | /\\ |\r\n            s4  s5\r\n             \\  /\r\n              s6\r\n\r\nThis can be represented with gotos as:\r\n\r\n    S1: if e1 goto S3\r\n    S2: if e2 goto S4 else goto S5\r\n    S3: if e3 goto S5\r\n    S4: goto S6\r\n    S5: goto S6\r\n    S6: ...\r\n\r\n(Assume that these are all basic blocks and have other statements besides the gotos.)\r\n\r\nHow would you represent this as a chain of ifs?  The statements in S4 and S5 are dominated by both S2 and S3, yet neither S2 nor S3 dominates the other.","timestamp_epoch":1566236767,"message_id":"26182-8ddb02ef-05d4-4a2c-8ece-47b606d38915-1566236767"}