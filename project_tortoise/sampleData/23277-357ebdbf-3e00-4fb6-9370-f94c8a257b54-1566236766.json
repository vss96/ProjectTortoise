{"created_utc":1165873107,"author_flair_css_class":null,"score":3,"ups":3,"subreddit":"programming","stickied":false,"link_id":"t3_uaqq","subreddit_id":"t5_2fwo","body":"I used to be in a research group with Claus, and he thinks very deeply about these fundamental notions. It's a beautifully clear comparision of the models underlying imperative and functional programming. What is striking, when it's put this way, is how imperative features can be viewed as a special case of the more general functional model.\r\n\r\nI usually think of purely functional code as being the expression part of a more general imperative language (even though C, Java etc. don't have purely functional expressions, you can imagine similar languages that do, ignoring aliasing difficulties).\r\n\r\nSo which is best? Programming in an imperative language that has a rich functional subset, or a functional langauge with a carefully circumscribed imperative subset? (like Haskell).","controversiality":0,"retrieved_on":1473808334,"distinguished":null,"gilded":0,"parent_id":"t3_uaqq","edited":false,"id":"cuhkb","author_flair_text":null,"author":"anthonydaniels","timestamp_epoch":1566236766,"message_id":"23277-357ebdbf-3e00-4fb6-9370-f94c8a257b54-1566236766"}