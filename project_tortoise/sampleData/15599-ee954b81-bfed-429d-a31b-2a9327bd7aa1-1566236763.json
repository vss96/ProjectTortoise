{"controversiality":0,"body":"&gt; Maybe that is overkill, but I do see benefit in having a subclass called Length or Mass. Too often I have had to call up the original developer to see what units were being used.\r\n\r\nThe more general pattern is to have \"units\", \"magnitudes\" (which are arithmetic types) and \"measurements\" (a composite of a unit and a magnitude). None of which get subclassed off of arithmetic types. There are some additional refinements that can be necessary, and with a statically typed language one may be able to handle the units part statically, but the general approach is a good one.\r\n\r\nIn the case of money, there are lots of exciting things one might encounter that make it convenient to have a money class. The most obvious one being that it is helpful to encapsulate any concerns about what arithmetic type you chose to use for money. Then you have things like formatting rules, currency conversions, preventing dubious arithmetic operations on money (what is the sin($10)? ;-), rounding rules, what the atomic magnitude is, whether a particular party accepts said currency, etc.\r\n\r\nNow, a lot of those concerns might not apply to a particular program (and you'd be silly to code them in that case), but it's not unusual for one or two of those things to end up creeping in to your code base, and when that happens, the fraction of a second it took you to create your Money class pays off in spades.","link_id":"t3_u0r5","stickied":false,"subreddit_id":"t5_2fwo","subreddit":"programming","author_flair_css_class":null,"created_utc":1165566293,"score":6,"ups":6,"author":"xcbsmith","author_flair_text":null,"id":"cu38d","edited":false,"parent_id":"t1_cu1q8","gilded":0,"retrieved_on":1473808065,"distinguished":null,"timestamp_epoch":1566236763,"message_id":"15599-ee954b81-bfed-429d-a31b-2a9327bd7aa1-1566236763"}