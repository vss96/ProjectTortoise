{"gilded":0,"retrieved_on":1473808673,"distinguished":null,"author_flair_text":null,"author":"[deleted]","edited":false,"id":"cuzm4","parent_id":"t1_curbq","subreddit":"programming","created_utc":1166234595,"author_flair_css_class":null,"score":2,"ups":2,"controversiality":0,"body":"s-expression syntax gets rid of precedence rules by losing operators and using everything as a function.\r\n\r\nThe same can be done with haskell, it just provides infix notation as a special sugar.\r\n\r\nso if you don't like:\r\n&gt; 1 + 1\r\n\r\nYou can use the prefix notation treating + like a function:\r\n&gt; (+) 1 1\r\n\r\nThus all your precedence rules are solved in exactly the same way lisp solves them.\r\n\r\nIndentation is also optional. If you don't want to use indentation, semicolons can be use to mark the end of statements and curly braces can be used to delimit blocks just like most imperative languages.\r\n","stickied":false,"link_id":"t3_uqo3","subreddit_id":"t5_2fwo","timestamp_epoch":1566236770,"message_id":"31873-0582c332-21cf-4ae4-93ec-7771afcfea1f-1566236770"}