{"gilded":0,"distinguished":null,"retrieved_on":1473808567,"author_flair_text":null,"author":"pjdelport","parent_id":"t1_cuqof","edited":false,"id":"cutzn","subreddit":"programming","score":5,"ups":5,"created_utc":1166138867,"author_flair_css_class":null,"body":"&gt; Would you mind giving me a reference/name/hint to a lisp macro which couldn't be specified as a lazy function?\r\n\r\nIn short, any macro which does more than alter the evaluation order.\r\n\r\nConsider R5RS's [derived expression types](http://www.schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-10.html#%_sec_7.3).  You have macros like `cond`, `case`, `and`, `or`, which only alter *when* and *whether* their input expressions are evaluated;  they are trivially expressible as functions in lazy languages.\r\n\r\nOn the other hand, macros can also alter *how* their input expressions are interpreted, like `let`/`let*`/`letrec` which introduce new bindings:\r\n\r\n    (let ((a foo)\r\n          (b bar))\r\n      body)\r\n\r\nâ‡’\r\n\r\n    ((lambda (a b) body)\r\n     foo bar)\r\n\r\nor the `do` loop syntax, which evaluates expressions multiple times.\r\n\r\nSome more examples:\r\n\r\n* [Generalized set! syntax](http://srfi.schemers.org/srfi-17/srfi-17.html) (SRFI 17)\r\n* [List comprehension syntax](http://srfi.schemers.org/srfi-42/srfi-42.html) (SRFI 42)\r\n* Most object-oriented programming libraries\r\n* [CPS transformation](http://okmij.org/ftp/Computation/Continuations.html#fix-callcc)\r\n* An [informative assert](http://okmij.org/ftp/Scheme/util.html#assert) that intelligently deconstructs the asserted expression\r\n* [Overloading lambda](http://okmij.org/ftp/Scheme/lambda-derived.txt) for tracing or other mischief\r\n* [Infix notation](http://www.dwheeler.com/readable/)\r\n\r\nAddendum: [this recent reddit post](http://programming.reddit.com/info/utz4/comments) seems pretty relevant.","controversiality":0,"subreddit_id":"t5_2fwo","stickied":false,"link_id":"t3_ujj3","timestamp_epoch":1566236769,"message_id":"29211-3eebc5e6-39fa-437c-bb81-c296990668af-1566236769"}