{"subreddit":"programming","author_flair_css_class":null,"created_utc":1165424999,"score":11,"ups":11,"controversiality":0,"body":"&gt; Python. Not a reason. Both Python and Ruby are thin wrappers for C (and therefore machine language), and so are pretty much equal. \r\n\r\nGonna call BS on this; for me, the big attraction is Python's \"batteries included\" philosophy -- the standard library rocks, and there are tons of useful third-party modules as well. I've seen people who are more familiar with Ruby mention Python's stdlib with envy, though there are a couple efforts I know of to improve Ruby's situation.\r\n\r\n&gt; Documentation. Python-ers, I suppose, like things to be GNUish. Ruby works more like the Apple world. Interested? Buy the book.\r\n\r\nWell... back before Django was released I was doing Rails stuff, and I did buy the book. But it was out-of-date almost before it was published, which left me with \"here's the auto-generated API documentation and a wiki, isn't that enough?\"\r\n\r\n&gt; Look, we reinvented PHP again. Every \"templating system\" eventually evolves to the point where it becomes a programming language in its own right, and then has another templating system written in it.\r\n\r\nApparently you haven't actually looked at Django's templating language -- one of the explicit design goals, which gets brought up as a response to lots of feature requests, is that it's not and never will become a programming language :)\r\n\r\n&gt; Speed. These are rapid _prototyping_ languages. Speed is not the primary issue.\r\n\r\nCalling Ruby and Python \"prototyping languages\" is like calling C a portable assembly language. Sure, that's one aspect, but there's more to it than that.\r\n\r\n&gt; An SQL manager, which Rails apps assume you already have separately, but which Django assumes it should be for you. Framework bloat, by any other name, is a feature.\r\n\r\nHuh? Oh, are you talking about the admin app, which is bundled but not installed by default, and which lives in a hierarchy called `contrib` ? Should products not bother with including useful optional plug-ins?\r\n\r\n&gt; Generic views and feeds, which in Rails are called \"scaffolds\" (which you can just use the controller portion of if you want).\r\n\r\nNot really. Rails' scaffolds are static files programmatically generated by a script, which hurts their flexibility and reusability. Django's generic views are first-class callables which alter their behavior based on runtime parameters.\r\n\r\n&gt; Support. Server. Crap. Stop comparing eachothers' dads' penis sizes; they're not yours. Python wins are not Django wins, and Ruby wins are not Rails wins.\r\n\r\nSee my comments above about libraries and modules. There are some modules available for Python which, to me, are absolutely essential to working on the web, and which have no equivalents in Ruby. Hence, if I wanted to do the same things in Ruby, I'd have to write those libraries myself.\r\n\r\n&gt; This is a negative argument, as far as I can tell. Ruby makes AJAX and XML-RPC easier. So it's more powerful, and people might use that power for evil? Well I'll be darned.\r\n\r\nI've got very strong opinions on server-side frameworks which write your JavaScript for you, namely that you should grow up and learn to write JavaScript :)\r\n\r\nThat said, I don't like the idea of \"HTML with programming language embedded\", so I sure don't like the idea of \"JavaScript with programming language embeded\". It already _is_ a programming language, and not a bad one at that.","link_id":"t3_tsel","stickied":false,"subreddit_id":"t5_2fwo","gilded":0,"retrieved_on":1473807908,"distinguished":null,"author_flair_text":null,"author":"ubernostrum","id":"ctutm","parent_id":"t1_ctt79","edited":false,"timestamp_epoch":1566236761,"message_id":"11767-2df9e9b4-895e-4f14-b11a-f46fecf97720-1566236761"}