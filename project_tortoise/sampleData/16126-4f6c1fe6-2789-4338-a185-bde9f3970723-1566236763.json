{"retrieved_on":1473808087,"distinguished":null,"gilded":0,"edited":false,"id":"cu4h5","parent_id":"t1_cu41h","author":"pjdelport","author_flair_text":null,"author_flair_css_class":null,"created_utc":1165592428,"score":2,"ups":2,"subreddit":"programming","link_id":"t3_u2ng","stickied":false,"subreddit_id":"t5_2fwo","body":"&gt; So what you are saying is that Erlang preemptively schedules? And that you personally find preemptive scheduling more reliable.  Well I personally find cooperative scheduling more reliable.\r\n\r\nThere's a huge difference:  Erlang uses message-passing, instead of shared state, for all inter-thread communication.  It makes cooperative scheduling entirely redundant;  preemptive threading is just as safe.\r\n\r\nDespite their superficial similarity, you can't really compare Python and Erlang's threading.  They're as different as (say) Scheme and Haskell's approaches to functional programming.","controversiality":0,"timestamp_epoch":1566236763,"message_id":"16126-4f6c1fe6-2789-4338-a185-bde9f3970723-1566236763"}