{"distinguished":null,"retrieved_on":1473808057,"gilded":0,"id":"cu2vl","edited":false,"parent_id":"t1_cu2rv","author_flair_text":null,"author":"Hupperware","score":3,"ups":3,"author_flair_css_class":null,"created_utc":1165556865,"subreddit":"programming","subreddit_id":"t5_2fwo","link_id":"t3_u0r5","stickied":false,"controversiality":0,"body":"Why write speculation code? Your code and style shouldn't be aware that it may need additional code. Your idea of throwing comments in the block to deodorize your code probably means that you aren't factoring it correctly. Comments are not a necessary evil as the author tries to convey.\r\n\r\nLet's just play with some real code. I may be opening a can of worms... but:\r\n[Bad Code with Mathematical/Geographical stuff](http://www.codeproject.com/csharp/distancebetweenlocations.asp?df=100&amp;forumid=245892&amp;exp=0&amp;select=1408147)\r\n\r\nFactored (according to the author):\r\n\r\npublic static double FindDistanceBetweenPoints(double aLatitudeOne, double aLongitudeOne, double aLatitudeTwo, double aLongitudeTwo, bool isMiles) {\r\n\r\n        /*\r\n            The Haversine formula according to Dr. Math.\r\n            http://mathforum.org/library/drmath/view/51879.html\r\n                \r\n            dlon = lon2 - lon1\r\n            dlat = lat2 - lat1\r\n            a = (sin(dlat/2))^2 + cos(lat1) * cos(lat2) * (sin(dlon/2))^2\r\n            c = 2 * atan2(sqrt(a), sqrt(1-a)) \r\n            d = R * c\r\n                \r\n            Where\r\n                * dlon is the change in longitude\r\n                * dlat is the change in latitude\r\n                * c is the great circle distance in Radians.\r\n                * R is the radius of a spherical Earth.\r\n                * The locations of the two points in \r\n                    spherical coordinates (longitude and \r\n                    latitude) are lon1,lat1 and lon2, lat2.\r\n        */\r\n\r\n        double area = Math.Pow(Math.Sin((ToRadians(aLatitudeTwo) - ToRadians(aLatitudeOne)) / 2.0), 2.0) + \r\n                   Math.Cos(ToRadians(aLatitudeOne)) * Math.Cos(ToRadians(aLatitudeTwo)) * \r\n                   Math.Pow(Math.Sin((ToRadians(aLongitudeTwo) - ToRadians(aLongitudeOne)) / 2.0), 2.0);\r\n\r\n\\tif (isMiles) return ToMiles(GetCircleDistanceInRadians(area));\r\n\\treturn ToKilometers(GetCircleDistanceInRadians(area));\r\n}\r\n\r\nprivate double GetCircleDistanceInRadians(double anArea){\r\n\\t\r\n     return 2.0 * Math.Atan2(Math.Sqrt(anArea), Math.Sqrt(1.0 - anArea));\r\n}\r\n\r\nprivate double ToRadians(double aLongitudeOrLatitude) {\r\n\\t\r\n    return aLongitudeOrLatitude * (Math.PI / 180.0);\r\n\r\n}\r\n\r\nprivate double ToMiles(double aCircleDistanceInRadians) {\r\n\\t\r\n   //Earth radius in miles = 3956.0\r\n\r\n   return aCircleDistanceInRadians * 3956.0;\r\n\r\n} \r\n\r\nprivate double ToKilometers(double aCircleDistanceInRadians){\r\n\r\n\\t//Earth radius in kilometers = 6376.5\r\n    \\treturn aCircleDistanceInRadians * 6376.5;\r\n} \r\n\r\n","timestamp_epoch":1566236762,"message_id":"15446-6aeaa683-ed06-4250-b849-c65d8b33582e-1566236762"}