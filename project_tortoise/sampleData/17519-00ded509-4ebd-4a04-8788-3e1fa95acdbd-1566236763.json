{"gilded":0,"distinguished":null,"retrieved_on":1473808133,"author":"shit","author_flair_text":null,"id":"cu6ve","edited":false,"parent_id":"t1_cu6kp","subreddit":"programming","ups":2,"score":2,"created_utc":1165626924,"author_flair_css_class":null,"controversiality":1,"body":"&gt; what is the OO feature that python is missing that makes it less OO\r\n\r\nNone. I'll try to explain it. But actually coding Ruby would benefit anyone more than an explanation.\r\n\r\n&gt; 1 + 1 = 2\r\n\r\nwine + coke != wine, it's a drink on its own, which many people prefer over pure wine (at least where I live :-).\r\n\r\nSome points that suggest that Ruby is more OO:\r\n\r\nRuby's syntax is more optimized for OOP.\r\n\r\nRuby:\r\n\r\n    @foo   # instance variable\r\n    foo.bar # send message bar to foo\r\n    def foo(bar) ... # method definition\r\n\r\nPython:\r\n\r\n    self.foo # foo might be an instance variable\r\n             # of self or might belong to the class\r\n             # of self (variable or method) and then\r\n             # it might invoke a getter function\r\n    foo.bar() # call instance method, static method\r\n              # or class method.\r\n    def foo(bar): # function or method definition\r\n\r\nRuby code is always executed in the context of\r\na current object (available via `self`). In Python the current object is explicitely passed in method calls, per convention the variable holding this object is named `self`. Would you like to maintain code that uses something else? If not, why not pass it implicit, Python is OO afterall? Note again: I'm not saying that the Ruby approach is better per se, just that it suggests that OO is more prevalent in Ruby than in Python.\r\n\r\nExample Ruby code:\r\n\r\n    class &lt;&lt; Foo\r\n      # self is now the class of Foo\r\n      def bar\r\n        ...\r\n      end\r\n    end\r\n    # Note: \"def Foo.bar() ... end\" has the same effect.\r\n    # Foo might be any object (e.g. a class object),\r\n    # sure is, we can call Foo.bar now\r\n\r\nPython uses a functional facade for certain protocols that are implemented as method calls anyway. Example:\r\n\r\n    len(foo)  # dispatches to foo.__len__()\r\n\r\nWhy not use the more direct and more OO:\r\n\r\n    foo.len()\r\n\r\nin the first place?\r\n\r\nRuby uses methods (most called `each`) for iteration, Python uses for/in syntax (again, maps to method calls). Python uses list comprehension where Ruby uses custom map, collect, select, etc. methods. Python has special `print` syntax, where Ruby has the puts, print, p, etc. methods. Uses of the `with` syntax in Python (again, implemented as method calls), are simple method calls in Ruby.\r\n\r\nIf you count OO features though, Python is on par with Ruby. When someone says that Python is less OO than Ruby, which IMO is not inherently bad, Pythonistas react almost allergic. From the top of my head, features from Python I miss in Ruby: the module system and generators.","subreddit_id":"t5_2fwo","stickied":false,"link_id":"t3_u2mr","timestamp_epoch":1566236763,"message_id":"17519-00ded509-4ebd-4a04-8788-3e1fa95acdbd-1566236763"}