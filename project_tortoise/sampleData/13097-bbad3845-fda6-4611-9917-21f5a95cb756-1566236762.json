{"parent_id":"t3_twtt","edited":false,"id":"ctxn2","author":"jerf","author_flair_text":null,"retrieved_on":1473807960,"distinguished":null,"gilded":0,"link_id":"t3_twtt","stickied":false,"subreddit_id":"t5_2fwo","controversiality":0,"body":"I'm at least \"sympathetic\" to the functional programming story, so it's not that I'm intrinsically against the idea of functional languages (\"give me what works\"), but: The article makes a leap in logic that basically undermines its entire point.\r\n\r\nThe article is predicated on using \"lines of code\" as a proxy for productivity. It then compares Haskell to C++ and two brands of Ada, observing the order of magnitude gain.\r\n\r\nOK, but a common rule-of-thumb multiplicative factor for Python into C++ is around 5 to 10, and Python isn't really functional. (It supports \"OO-Functional\", where the OO is dominant, but it doesn't support \"Functional-OO\"; side-effects abound.) So, Python has all the productivity benefits of Haskell without the functional nature.\r\n\r\nThus, the question arises, how are you sure that the solution exists in the Functional nature of Haskell, and not merely in replicating the same sort of functionality as Python (or Ruby or Perl or ...), only differently? (Just as Python replicates Perl, only differently, etc.)\r\n\r\nI think a much stronger argument in general is arguing that functional languages will save us from multi-core hell, which Python has no particular advantage with vs. C++ or any other system that basically runs on POSIX threads or variants thereof. In a single-core world, the benefits of purely functional languages are definitely somewhat more theoretical. \r\n\r\n(Note that I'm not claiming that functional will save us from multicore hell; I don't really know. All I do know is that is where the argument that we should be using functional languages and not an n-th generation OO language like Python or Ruby is the strongest, in my opinion.)","author_flair_css_class":null,"created_utc":1165463188,"score":14,"ups":14,"subreddit":"programming","timestamp_epoch":1566236762,"message_id":"13097-bbad3845-fda6-4611-9917-21f5a95cb756-1566236762"}