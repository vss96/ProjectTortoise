{"retrieved_on":1473807456,"distinguished":null,"gilded":0,"id":"ct6rw","edited":false,"parent_id":"t3_t5vi","author_flair_text":null,"author":"pchiusano","created_utc":1164946291,"author_flair_css_class":null,"score":7,"ups":7,"subreddit":"programming","stickied":false,"link_id":"t3_t5vi","subreddit_id":"t5_2fwo","body":"Here is the abstract:\r\n\r\n&gt;In functional programming, fold is a standard operator that encapsulates a simple pattern of recursion for processing lists. This article is a tutorial on two key aspects of the fold operator for lists. First of all, we emphasize the use of the universal property of fold both as a proof principle that avoids the need for inductive proofs, and as a definition principle that guides the transformation of recursive functions into definitions using fold. Secondly, we show that even though the pattern of recursion encapsulated by fold is simple, in a language with tuples and functions as first-class values the fold operator has greater expressive power than might first be expected. \r\n","controversiality":0,"timestamp_epoch":1566236758,"message_id":"512-48003def-0b4e-4bef-896a-5e2f958207b6-1566236758"}