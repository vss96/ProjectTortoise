{"gilded":0,"distinguished":null,"retrieved_on":1473807981,"author_flair_text":null,"author":"KayEss","edited":false,"id":"ctyt8","parent_id":"t1_ctvjb","subreddit":"programming","score":3,"ups":3,"author_flair_css_class":null,"created_utc":1165491421,"body":"I'm not sure about that. I've been using and teaching OO for 15 years and wouldn't say that I'm in any of those categories.\r\n\r\nOO tends to be extremely badly taught, and the examples held up of 'good OO design' tend to miss the boat completely.\r\n\r\nSo far I've not seen any messy, real-world system design that wasn't improved by using OO. I've also seen far too many systems that have been terribly executed by people who never got the point of it all.\r\n\r\nHere are some tests to find people who don't know OO:\r\n\r\n1. If they can't explain the difference between a message and a method they don't know it.\r\n2. If they think inheritance is important they don't know it.\r\n3. If they don't know the difference between inclusional (hierarchies) and operational (ducktyping) polymorphism they don't know it.\r\n\r\nThe single most important thing to understand is the message delivery mechanisms available within the language you're using. Any other consideration comes in a distant second.\r\n\r\nAs Alan Kay laments, it really oughtn't be called 'object oriented'. That's completely the wrong focus. 'Message oriented programming' is a more prosaic, but also more accurate term.\r\n\r\nAlan Kay on messages: http://programming.reddit.com/goto?id=lqt6\r\n","controversiality":0,"subreddit_id":"t5_2fwo","link_id":"t3_tsa7","stickied":false,"timestamp_epoch":1566236762,"message_id":"13575-aaad6a0d-53e2-4953-95fa-08e85e975ce7-1566236762"}