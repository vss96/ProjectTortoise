{"subreddit_id":"t5_2fwo","link_id":"t3_u0r5","stickied":false,"controversiality":0,"body":"Lets take a look at the idioms:\r\n\r\n1. Inability to grok booleans/Inability to grok assignment - These are obvious and trivial. Yes it is good to cut back on useless code.\r\n\r\n2. Ignorant Prefixing - Agreed, although I sometimes prefix with a domain specific letter.\r\n\r\n3. Single exit points - This is just a tradeoff. Sometimes it *is* cleanest to have multiple return points, but usually it isn't.\r\n\r\n4. 1000 line methods - \"A method should be 7 to 10 lines of code\". This is just plain wrong. Some programs simply need a few workhorse functions. Some algorithms sit in a large code block quite comfortably and make little sense to split up into components.\r\n\r\n5. Declaring variables at the top of a method - This is a good point.\r\n\r\n6. Too many comments / worthless comments - Fully agree with this one.\r\n\r\n7. Error Codes - This is another plain wrong remark. Error codes are not a dead technique. They work just fine, and I don't find them error prone (especially as my language of choice has multiple return values and an excellent standard idiom for passing errors).\r\n\r\n8. Lack of Consistency and Style - Agreed.\r\n\r\n9. Switch Statements - Meh. I don't use them, but switching across a large range of values with the same type makes sense.\r\n\r\n10. Obsession with Simple Types - This is a style issue,  abstraction is good for some situations, and bulky for others.\r\n\r\n11. XML Hell - Agreed.\r\n","score":3,"ups":3,"author_flair_css_class":null,"created_utc":1165543186,"subreddit":"programming","id":"cu29i","edited":false,"parent_id":"t3_u0r5","author_flair_text":null,"author":"Fork82","distinguished":null,"retrieved_on":1473808046,"gilded":0,"timestamp_epoch":1566236762,"message_id":"15091-4ad9f5d7-d9f2-42c9-a26b-af0d38e368aa-1566236762"}