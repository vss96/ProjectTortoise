{"gilded":0,"retrieved_on":1473808046,"distinguished":null,"author":"rpdillon","author_flair_text":null,"id":"cu2as","edited":false,"parent_id":"t1_cu1a0","subreddit":"programming","created_utc":1165543964,"author_flair_css_class":null,"score":1,"ups":1,"controversiality":1,"body":"7-10 is a great guideline.  There are tons of reasons for it, and your argument essentially boils down to \"Well, you can still write bad code even if you follow this rule.\"\r\n\r\nNews flash: you can *always* write bad code.  No set of rules, guidelines or language choices will ever prevent it.\r\n\r\nAs far as why 7-10 is good?  I helps you decompose your problem well, it helps you make your code more modular, it provides a set of methods that can be unit tested effectively, it is easier to read for people who are looking at it for the first time and it encourages solutions that are more abstract, resulting in more code reuse opportunities.\r\n\r\nIt doesn't *enforce* any of these - again, you can always write bad code.  But it does encourage the programmer to take notice of program design that does not follow those principles - giving them the opportunity to refactor and fix it.\r\n\r\nAnd if you think that complex programs cannot be written using 7-10 line methods, well, you just haven't seen how to do it yet.  =)  The best thing about such programs is that they have complex behavior, but they are still easy to understand because they are decomposed in a natural, orderly fashion.  Good code is a sight to behold.","stickied":false,"link_id":"t3_u0r5","subreddit_id":"t5_2fwo","timestamp_epoch":1566236762,"message_id":"15110-af1c7efb-8abf-4d9e-9858-fe07cea966d3-1566236762"}