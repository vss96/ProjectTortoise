{"gilded":0,"retrieved_on":1473808605,"distinguished":null,"author_flair_text":null,"author":"martoo","id":"cuw3b","edited":false,"parent_id":"t1_cuv11","subreddit":"programming","created_utc":1166183735,"author_flair_css_class":null,"ups":1,"score":1,"controversiality":0,"body":"&gt; How are properties less encapsulated than methods?\r\n\r\nIf you look at MS's recommendations for properties you see that you are not supposed to put significant computation in them, and that makes sense.  If it looks like a variable access, and the language by convention distinguishes between properties and methods, it shouldn't be recomputing the world.  In other languages, however, if you have a method like \"getTotal\" on an object, there is no assumption that is is a simple variable access.  It could do significant computation.\r\n\r\nSo, if you use a property in C#, and decide later to refactor, moving significant computation into it, you should go back and make it a method.  And, that's a pain in the ass.  You have to change all the callers.\r\n\r\nRuby and Eiffel have this problem licked.  You can call a method with no args without parens, so it looks like a variable.  And, in fact, you can start with a variable and change to a method without changing all the calls.\r\n\r\nThis is called ''the uniform access principle'' and needless to say, MS knew nothing about it, so they did something boneheaded.","stickied":false,"link_id":"t3_utqb","subreddit_id":"t5_2fwo","timestamp_epoch":1566236769,"message_id":"30207-a7425304-b726-4e8a-ab63-9a59d72c8b18-1566236769"}