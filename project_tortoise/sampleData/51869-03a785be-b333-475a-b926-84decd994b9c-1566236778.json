{"gilded":0,"distinguished":null,"retrieved_on":1473809434,"author":"japple","author_flair_text":null,"edited":false,"parent_id":"t1_cw37h","id":"cw3i9","subreddit":"programming","score":12,"ups":12,"created_utc":1167174501,"author_flair_css_class":null,"body":"Here's an example:\r\n\r\n    data RedBlackTree count color a where\r\n        Nil :: RedBlackTree Zero Black a\r\n        Red :: RedBlackTree n Black a -&gt; a -&gt; RedBlackTree n Black a -&gt; RedBlackTree n Red a\r\n        Black :: RedBlackTree n leftColor a -&gt; a -&gt; RedBlackTree n rightColor a -&gt; RedBlackTree (Succ n) Black a\r\n    \r\n    data RedBlackTree' a = forall count . RedBlackTree count Black a\r\n\r\n    data Zero\r\n    data Succ n\r\n    data Red\r\n    data Black\r\n\r\nThat's [red-black trees](http://en.wikipedia.org/wiki/Red_black_trees) from a naive specification. I can now write the library functions (like tree rotation) while being sure I'm never making a balancing mistake.","controversiality":0,"subreddit_id":"t5_2fwo","stickied":false,"link_id":"t3_w1oz","timestamp_epoch":1566236778,"message_id":"51869-03a785be-b333-475a-b926-84decd994b9c-1566236778"}