{"subreddit_id":"t5_2fwo","stickied":false,"link_id":"t3_t9ys","body":"&gt; Just look at any discussion on this web site where performance is mentioned; a standard Ruby response is \"buy faster hardware\" or \"code it in C\". Well that defeats the purpose, doesn't it?\r\n\r\nDepends on the purpose.\r\n\r\nOne purpose of many of the more recent dynamic languages (where by \"recent\" I mean since 1990 or so) is not to optimize the performance of the program, but to optimize the performance of the programmer. In which case we're actually talking about a trade-off between:\r\n\r\n1. Write 5,000 lines of C.\r\n2. Write 1,000 lines of `$DYNAMIC_LANGUAGE` and maybe 500-1000 lines of C for performance-critical parts.\r\n3. Write 1,200-1,500 lines of `$DYNAMIC_LANGUAGE` and buy more hardware.\r\n\r\nDepending on your needs, the correct choice will vary; most day-to-day Python/Ruby/whatever programmers have chosen option 2 or option 3 because they've found that it suits their needs, but plenty of other programmers choose and will continue to choose option 1 because it suits their needs.\r\n\r\nRight tool, right job and all that. Though these days writing everything in C is starting to look more and more like a premature optimization for many tasks...","controversiality":0,"score":3,"ups":3,"created_utc":1165007393,"author_flair_css_class":null,"subreddit":"programming","id":"cta2y","parent_id":"t1_ct9yy","edited":false,"author":"ubernostrum","author_flair_text":null,"distinguished":null,"retrieved_on":1473807518,"gilded":0,"timestamp_epoch":1566236758,"message_id":"2117-ba245ddf-70c0-4d43-9a71-b13e8f995b0b-1566236758"}