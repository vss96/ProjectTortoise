{"score":2,"ups":2,"created_utc":1165865253,"author_flair_css_class":null,"subreddit":"programming","subreddit_id":"t5_2fwo","stickied":false,"link_id":"t3_u3p2","body":"&gt; When comparing the to the single implementation languages such as Python, Perl and Ruby this isn't cheating.\r\n\r\nAgreed. (My biggest Ruby program doesn't run on JRuby.)\r\n\r\n&gt; If you still think it is cheating, then just choose a portable object system like Meroon, which is fast due to Queinnec's work on compiling object system.\r\n\r\nHmm. I doubt that a portable object system is faster than one written specifically for plt-scheme. If I find some time I'll repeat my unscientific benchmark and report back :-)\r\n\r\nJust for the record, I weighed the following points against each other when deciding wheter to invest more time in Scheme versus CL:\r\n\r\nPro plt scheme:\r\n\r\n* There is a tendency to do the right thing, e.g. a nice module system.\r\n* Scheme is arguably nicer than core CL.\r\n* Continuations\r\n* Better suited for scripting.\r\n\r\nPro CL:\r\n\r\n* Interactive development, Slime.\r\n* Bigger community, I can share code with other implementations (mainly due to standardized packages, CLOS and conditions).\r\n* Generally faster, CLOS is fast too.\r\n* Keyword arguments (plt-scheme has a macro, I think called lambda/kw, but it's not used in the rest of the libraries)\r\n* OS threads (with sbcl).","controversiality":0,"distinguished":null,"retrieved_on":1473808324,"gilded":0,"parent_id":"t1_cugrr","edited":false,"id":"cuh0d","author":"shit","author_flair_text":null,"timestamp_epoch":1566236766,"message_id":"22967-a3875f63-1734-449e-adfd-43ed59a63524-1566236766"}