{"edited":false,"parent_id":"t1_ctx2b","id":"ctxr5","author":"rsanheim","author_flair_text":null,"distinguished":null,"retrieved_on":1473807961,"gilded":0,"subreddit_id":"t5_2fwo","stickied":false,"link_id":"t3_tvf3","body":"These claims are just not true of Rails or Ruby in general.  I know Rails, and the source is clean and well designed, has a huge amount of unit tests, and uses metaprogramming and dynamic features *where warranted*.  There are plenty of areas where the code is plain and simple, as the design and features call for it.  Skilled Ruby programmers know to pull out magic only when the situation really calls for it, and not as an attempt to simply shorten line count or try out a new feature.  If you submit a patch to Rails that goes nuts with eval's and dynamic code creating for no good reason, expect it to be rejected.\r\n\r\nThe routing system is a good example - the first implementation (pre 1.1 I think) was very complex and hard to follow and debug.  It got a rewrite from the ground-up to be faster, cleaner, and easier to read and extend.  Its still not simple code, as handling pretty URL generation isn't a simple task (see also: mod_rewrite), but its far better.\r\n\r\nRuby isn't Perl, and the criticisms put on Perl aren't fair to lay on Ruby or the Rails team.","controversiality":1,"score":4,"ups":4,"created_utc":1165464989,"author_flair_css_class":null,"subreddit":"programming","timestamp_epoch":1566236762,"message_id":"13139-15b303d3-963c-4bb8-9586-ad313f8d4fb1-1566236762"}