{"gilded":0,"distinguished":null,"retrieved_on":1473807534,"author":"damienkatz","author_flair_text":null,"edited":false,"parent_id":"t3_t8l4","id":"ctaxa","subreddit":"programming","score":1,"ups":1,"created_utc":1165023352,"author_flair_css_class":null,"controversiality":0,"body":"No. Generally speaking, explicit concurrency should be avoided in Web applications and should be handled by the database server. Concurrency is just a needless complication for the vast majority of web applications.\r\n\r\nConcurrency is hard for 2 reasons:\r\n\r\n1. In most programming languages, concurrency means threading, which means \"shared state concurrency\". Threading is inherently dangerous, because the parts of concurrency that should be explicit are instead implicit and vice-versa.\r\n\r\n2. Explicit concurrency is harder for humans to conceptualize than linear steps.\r\n\r\nErlang solves problem #1 and helps a little on #2, but nothing really handles problem #2 very well.\r\n\r\nFor most web applications concurrency is best handled implicitly by the database server, not by the application code itself. The PHP execution model is often ideal for web applications. Each PHP request is treated as a isolated process. Failures in one request can't cause problems for other requests and concurrency is handled by the database server.\r\n\r\nThat's not to say explicit concurrency and threading in web apps are never necessary, but in most apps the PHP model  is good enough and is just plain easier for humans to get right.","subreddit_id":"t5_2fwo","stickied":false,"link_id":"t3_t8l4","timestamp_epoch":1566236759,"message_id":"2618-367c0ba1-ea5f-4552-a817-5a5b7c38fdc6-1566236759"}