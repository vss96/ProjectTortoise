{"link_id":"t3_u2mr","stickied":false,"subreddit_id":"t5_2fwo","body":"&gt;But actually coding Ruby would benefit anyone more than an explanation\r\n\r\nI have actually coded in ruby, but admittedly its quite a long time ago now (around 2000 I think), pre rails, so I imagine it bears little resemblance to the language as it stands now.\r\n\r\nWell your argument basically seems to boil down to , you prefer the ruby implementation of OO to the python implementation, which is a far cry from \"is less OO than\".\r\n\r\n&gt;In Python the current object is explicitly passed in method \r\n&gt;calls, per convention the variable holding this object is \r\n&gt;named self. Would you like to maintain code that uses \r\n&gt;something else?\r\n\r\nYes, particularly when dealing with code that uses multiple inheritance (an OO feature that ruby does not support, preferring mixins, which python also supports). Admittedly multiple inheritance can be a nasty feature in the wrong hands, but there are times when it is very useful. I also find that the self. syntax eliminates a lot of annoying coding convention arguments. And makes it clear at a glance. In short I find nothing about your sample that suggests OO is more prevalent in Ruby, in fact I find your sample indicates the opposite (ruby has omitted some OO features). However I would agree that OO is more prevalent, given that python allows other styles it would be difficult to believe otherwise.\r\n\r\n&gt;Python uses a functional facade for certain protocols that\r\n&gt;are implemented as method calls anyway.\r\n\r\nTrue, from an aesthetic point of view I agree on this one. I like using the len() function sometimes , but I believe every object should implement .len() as well, this is mostly the case now, but I would have to admit its a recent trend. In any event both languages are message passing based OO languages as opposed to class based languages, len(object) and object.len() are just different ways of passing the same message. I could for example make an equally pointless comparison between ruby and python methods. python has first class methods, where as ruby only has messages that happen to be called methods. An equally meaningless distinction.\r\n\r\n&gt;Ruby uses methods (most called each) for iteration, Python\r\n&gt; uses for/in syntax which then typically \r\n\r\nruby also uses for/in syntax, which appears to work pretty much the same way afaik, as above, I really do not see the difference.\r\n\r\n&gt;Python uses list comprehension where Ruby uses custom map, collect, select, etc. methods\r\n\r\nSame again, True the python syntax for  list comprehensions is not typically OO, but no more so than the ruby syntax for blocks\r\n\r\n&gt;Python has special print syntax, where Ruby has the puts, print, p, etc. methods.\r\n\r\nThis could be ignorance of something on my part, but ruby has an identical print syntax...., if this somehow makes python non OO, then so is ruby\r\n\r\n&gt;Uses of the with syntax in Python (again, implemented as\r\n&gt; method calls), are simple method calls in Ruby.\r\n\r\nsame story as list comprehensions\r\n\r\n&gt;From the top of my head, features from Python I miss in \r\n&gt;Ruby: the module system and generators.\r\n\r\nFor my part there are times I wish python had rubys anonymous block syntax, I understand\r\nand sympathize with Guidos stance on readability on this one, but I still wish python\r\nhad it. I really do not believe there is a lot to choose between python and ruby. I imagine if I had come across ruby at roughly the same time I began using python, I would not be bothered learning python now. But as I have, I do not see any advantage to bringing my ruby knowledge up to the same level. I spend a lot of time experimenting with different languages (erlang being my current pet language), and If I ever find a convincing reason\r\nto bring my ruby knowledge up to date I will.\r\n\r\nI have yet to see any example of ruby being \"more OO\", in fact having now thought about\r\nit it appears Ruby is missing multiple inheritance, and I am not aware of any missing features in the opposite direction...\r\n\r\nPython developers tend to \"react almost alergic\" due to their amazement that people would say ruby is \"more OO than python\" when it has no OO capabilities that python does not. If you where to say that the ruby community is more OO, I would agree, there are many python devs that barely use OO preferring other styles and not everyone believes OO to be the end all be all of programming, If you where to say that most ruby code written is more OO than python I would also agree. However claims that ruby itself is \"more OO\" seem completely baseless.\r\n\r\n\r\n\r\n\r\n","controversiality":0,"author_flair_css_class":null,"created_utc":1165656283,"score":2,"ups":2,"subreddit":"programming","id":"cu7xh","edited":false,"parent_id":"t1_cu6ve","author_flair_text":null,"author":"seanodonnell","retrieved_on":1473808153,"distinguished":null,"gilded":0,"timestamp_epoch":1566236763,"message_id":"18171-f16b1aed-1da4-4016-9aef-328272b63782-1566236763"}