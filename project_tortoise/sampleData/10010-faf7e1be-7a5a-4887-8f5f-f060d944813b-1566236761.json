{"gilded":0,"retrieved_on":1473807839,"distinguished":null,"author_flair_text":null,"author":"dons","edited":false,"id":"ctr6q","parent_id":"t1_ctpa7","subreddit":"programming","author_flair_css_class":null,"created_utc":1165356469,"score":2,"ups":2,"body":"Ah ok. That clarifies things. Cheers.\r\n\r\n*NB* that's still function composition! \r\n\r\nEither you modify the arguments first, then apply 'f', as above, or you apply 'f' and modify the result. Both cases can be captured using function composition:\r\n\r\n    -- modify arguments to f, then apply f, yielding a decorated f\r\n    f (x,y)      = x + y\r\n    annotate x y = ((x * 2),(y * 3))\r\n    decorate     = (f .) . annotate       -- i.e. f (annotate a b))\r\n\r\n    Prelude&gt; decorate 7 8\r\n    38\r\n\r\n    -- modify result, after applying 'f'\r\n    f (x,y)      = x + y\r\n    annotate  z  = z * 2\r\n    decorate     = annotate . f           -- i.e. annotate (f c)\r\n\r\n    Prelude&gt; decorate (7,8)\r\n    30\r\n\r\nDo decorators do anything that isn't captured by these two scenarios: a) composing 'f' with a function to modify its arguments, or b) composing a result modifier with 'f' ?","controversiality":0,"link_id":"t3_to4r","stickied":false,"subreddit_id":"t5_2fwo","timestamp_epoch":1566236761,"message_id":"10010-faf7e1be-7a5a-4887-8f5f-f060d944813b-1566236761"}