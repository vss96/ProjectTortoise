{"body":"Ugh. A few of these I feel are terrible, but oft repeated and poorly argued.\r\n\r\nMy biggest argument with this piece is the (unfortunately common, for this sort of thing) obsession with small function size. If I only use a block of code in one place, I'm not moving it into it's own function unless it's clearly it's own procedure in terms of what it does. Sticking non-reused code into individual functions isn't elegance, it's bloat. More code thanks to boilerplate function headers and/or prototypes, and more executed instructions thanks to pointless stack operations. No thanks.\r\n\r\nAdditionally, breaking up code into functions in arbitrary places means that it's harder to debug these functions in isolation (the main benefit of breaking code into functions) because the code might not be intended to perform work in isolation. Clean structuring *within* a procedure can facilitate incremental development and testing just as well as procedural partitioning, IMHO, and without having to jump all over the code from one function to another. I believe the author confuses the benefits of distinct procedures from simple block structuring.\r\n\r\nI rule of thumb I've been following lately, and which I actually picked up here on Reddit, is to consolidate code that is 3 or more lines long and is duplicated in 3 or more places. This is a pragmatic approach that works well, and encourages good refactoring habits.\r\n","controversiality":0,"subreddit_id":"t5_2fwo","link_id":"t3_u0r5","stickied":false,"subreddit":"programming","score":8,"ups":8,"author_flair_css_class":null,"created_utc":1165547100,"author_flair_text":null,"author":"Arkaein","id":"cu2gd","edited":false,"parent_id":"t3_u0r5","gilded":0,"distinguished":null,"retrieved_on":1473808049,"timestamp_epoch":1566236762,"message_id":"15199-c05dff94-928e-4046-88d4-84ced40abec9-1566236762"}