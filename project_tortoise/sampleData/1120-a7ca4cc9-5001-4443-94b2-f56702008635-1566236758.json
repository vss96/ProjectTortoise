{"subreddit":"programming","created_utc":1164981606,"author_flair_css_class":null,"score":1,"ups":1,"controversiality":0,"body":"Urgh.\r\n\r\nTry writing some threaded code without the GIL before you complain about it.  :)  It maintains more sanity than you may think.\r\n\r\nBesides, claims of the GIL's performance impact are greatly exaggerated:\r\n\r\n&gt; If you spawn new threads, even in C, they all still share the same GIL.\r\n\r\nThey don't all have to lock it, though.  Threads that execute bytecode or C/Python API calls do, but the rest (threads doing I/O, C code, native library calls and so on) can release the GIL and can run concurrently.\r\n\r\nIn other words, pretty much the only way for the GIL to become your bottleneck is to have multiple, interdependent threads doing heavy, non-I/O number-crunching in pure Python on a multi-core machine that is otherwise standing idle.  Not exactly your average application, but even then, there are several ways to circumvent the GIL:\r\n\r\n* If possible, delegate the critical parts of your processing to an extension like NumPy.  (Which should greatly speed things up anyway, compared to pure Python.)\r\n* Otherwise, if feasible, use [Pyrex](http://www.cosc.canterbury.ac.nz/greg.ewing/python/Pyrex/) to compile the critical parts to pure C, while releasing the GIL.  (Should also greatly speed things up anyway.)\r\n* Otherwise, if your OS has shared memory, use [POSH](http://poshmodule.sourceforge.net/) to share objects between processes.  (Still Python-level speed, but very little code modification.)\r\n* If all else fails, restructure your application to use message passing.  (Something you have to do anyway if you ever want to scale beyond a single machine.)","stickied":false,"link_id":"t3_t1qf","subreddit_id":"t5_2fwo","gilded":0,"retrieved_on":1473807480,"distinguished":null,"author_flair_text":null,"author":"pjdelport","edited":false,"id":"ct81q","parent_id":"t1_ct6xo","timestamp_epoch":1566236758,"message_id":"1120-a7ca4cc9-5001-4443-94b2-f56702008635-1566236758"}