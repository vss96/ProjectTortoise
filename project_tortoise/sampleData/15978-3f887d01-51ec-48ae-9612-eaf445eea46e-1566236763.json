{"author":"dons","author_flair_text":null,"edited":false,"id":"cu45w","parent_id":"t1_cu3us","gilded":0,"distinguished":null,"retrieved_on":1473808081,"controversiality":0,"body":"There's already, in the base library:\r\n\r\n    forM_ :: Monad m =&gt; [a] -&gt; (a -&gt; m b) -&gt; m ()\r\n    forM_ = flip mapM_\r\n\r\nif you want an imperative flavour:\r\n\r\n    forM_ [1..10] print\r\n\r\nThe names have historical import: its a cultural thing. mapM_ is the function 'map', lifted into a Monad, and discards its result, hence mapM_. Haskell isn't Java, its an FP language, so it uses FP terminology.\r\n\r\nBut feel free to define:\r\n\r\n    foreach = forM_ \r\n\r\nin your code!","subreddit_id":"t5_2fwo","stickied":false,"link_id":"t3_twtt","subreddit":"programming","score":4,"ups":4,"created_utc":1165588329,"author_flair_css_class":null,"timestamp_epoch":1566236763,"message_id":"15978-3f887d01-51ec-48ae-9612-eaf445eea46e-1566236763"}