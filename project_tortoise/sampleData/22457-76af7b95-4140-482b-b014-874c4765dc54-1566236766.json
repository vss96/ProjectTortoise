{"controversiality":0,"body":"I know it (it would be hard not to, when using their GUI library :-). But:\r\n\r\n* It comes with a second object system, swindle, which resembles CLOS. Both have their pros and cons. I slightly prefer CLOS/Swindle, partly because generic functions are still functions which can be passed around (e.g. to map).\r\n\r\n* Both object systems are slower (based on my unscientific microbenchmarks of method dispatch) than Ruby's. I choose to compare it to Ruby because I have experience with it and because Ruby is generally considered to be slower as Scheme. As a result, I'm always tempted to avoid method calls in inner loops (in Scheme).\r\n\r\n* Scheme is really cool to experiment with object systems. But since there is no standard one, there are hardly two significant pieces of code that use the same one.\r\n\r\nScheme is a minimalistic language with powerful constructs. But for Real Work you need more. Error handling, OO, a module system. Each Scheme implementation has its own mechanisms for these basic constructs. Thus you are bound to one implementation and its small community.\r\n\r\nCL is not as \"clean\" as Scheme, but it provides CLOS, conditions and packages. You have a realistic chance to port code to many different implementations (see cl-ppcre).\r\n\r\nAnother thing I prefer about CL is interactive development. It seems that Scheme has abandoned this capability. I have only used plt-scheme, perhaps it's different with other implementations. R6RS library syntax is a big step away from interactive development, though.","subreddit_id":"t5_2fwo","link_id":"t3_u3p2","stickied":false,"subreddit":"programming","score":1,"ups":1,"author_flair_css_class":null,"created_utc":1165852984,"author":"shit","author_flair_text":null,"id":"cug2u","edited":false,"parent_id":"t1_cufds","gilded":0,"distinguished":null,"retrieved_on":1473808306,"timestamp_epoch":1566236766,"message_id":"22457-76af7b95-4140-482b-b014-874c4765dc54-1566236766"}