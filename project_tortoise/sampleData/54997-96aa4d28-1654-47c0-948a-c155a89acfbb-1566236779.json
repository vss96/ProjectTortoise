{"author_flair_text":null,"author":"austinfavorite","edited":false,"id":"cw9ba","parent_id":"t3_w4aj","gilded":0,"retrieved_on":1473809544,"distinguished":null,"body":"C/C++: tail calls.\r\n\r\nScheme implementations must use tail-call optimizations at specific points of execution, but I think I'd prefer an explicit tail calling mechanism in C/C++.\r\n\r\nI'd like to use something like, say, a \"call\" statement, which goes to a function, either the same or another function, while using less stack space than a regular function call.\r\n\r\nFor example:\r\n\r\nint dreg1(int a)\r\n{\r\n  return frez(a * 2);\r\n}\r\n\r\nint dreg2(int a)\r\n{\r\n  call frez(a * 2);\r\n}\r\n\r\nint frez(int b)\r\n{\r\n  return b * 4;\r\n}\r\n\r\nCalling dreg1() would produce this call-chain: caller to dreg1(), dreg1() to frez(), return to dreg1(), return to caller. \r\n\r\nCalling dreg2(): caller to dreg2(), dreg2() to frez(), return to caller.\r\n\r\nExplicit tail-calling would let me implement co-routines more cleanly, threaded interpreters (think Forth), and boundless recursiveness to name a few possibilities. It would also introduce the potential for knotty spaghetti code, but then so does goto and it isn't a major problem.","controversiality":0,"stickied":false,"link_id":"t3_w4aj","subreddit_id":"t5_2fwo","subreddit":"programming","created_utc":1167320699,"author_flair_css_class":null,"score":2,"ups":2,"timestamp_epoch":1566236779,"message_id":"54997-96aa4d28-1654-47c0-948a-c155a89acfbb-1566236779"}