{"controversiality":0,"body":"&gt; I consider pattern matching (i.e. case-expressions) in a non-pure language for a control construct. Since we are seeking a definition of if in terms of function application that also works in a non-pure language, we need something else than pattern matching.\r\n\r\nPattern-matching also works in a non-pure language: look at Ocaml, for example.\r\n\r\nWhat exactly are you asking?  A definition of control structures in a language that lacks control structures?  By definition, that is not possible.  You need some way of selecting among different alternatives: in traditional languages, this means `if`, in assembly, conditional branches, in Lisp it means `cond`, in Haskell or ML it means pattern-matching, in lambda calculus it's encoded into the representations of booleans themselves.\r\n\r\nThe pure/impure aspect only comes up because if you represent `if` as a function, both arguments will be evaluated, which gives a different result if the arguments are impure.  So the pure/lazy, pure/strict, and impure/lazy implementations can all represent `if` as a function, modulo efficiency &amp; termination concerns.  Only the impure/strict case has problems (well, besides the problems inherent to an impure/lazy language).","subreddit_id":"t5_2fwo","stickied":false,"link_id":"t3_ujj3","subreddit":"programming","ups":2,"score":2,"created_utc":1166234474,"author_flair_css_class":null,"author":"nostrademons","author_flair_text":null,"parent_id":"t1_cuzbm","edited":false,"id":"cuzm0","gilded":0,"distinguished":null,"retrieved_on":1473808673,"timestamp_epoch":1566236770,"message_id":"31869-853f1656-62b1-40f2-813e-37994bff9c5d-1566236770"}