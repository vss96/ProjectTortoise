{"body":"This is a paper describing the new type theory (and GHC core language) for a number of recent sophisticated extensions to Haskell:\r\n\r\n* [associated types](http://haskell.org/haskellwiki/Research_papers/Type_systems#Associated_types)\r\n* [functional dependencies](http://haskell.org/haskellwiki/Research_papers/Type_systems#Functional_dependencies)\r\n* [generalised algebraic data types](http://haskell.org/haskellwiki/Research_papers/Type_systems#Generalised_Algebraic_Data_Types_.28GADTs.29)\r\n\r\nThe nice thing is that you can define all three (seemingly unrelated) features in terms of their encoding in System Fc.  This means no need for ad hoc compiler extensions: just implement System Fc in the compiler, and you get all 3 for free.\r\n\r\nFunctional dependencies are used in the implementation of monad transformers (amongst other things). They allow for Prolog-style constraint programming in the type system.\r\n\r\nAssociated types let you approximate (amongst other things) ML modules in Haskell using type classes. Another use is for self-optimising data types implemented in libraries.\r\n\r\n[GADTs](http://haskell.org/haskellwiki/GADT) are an extremely powerful generalisation of normal data types, letting you assert quite strong properties that the data should obey statically. For example, there's a plan for [darcs](http://darcs.net) to use GADTs for patches, ensuring that functions over patches are guaranteed by the type checker to preserve the patch theory invariants.\r\n\r\n*The best way to understand this stuff is to write actual code*","controversiality":0,"subreddit_id":"t5_2fwo","link_id":"t3_trj2","stickied":false,"subreddit":"programming","score":7,"ups":7,"author_flair_css_class":null,"created_utc":1165366430,"author":"dons","author_flair_text":null,"parent_id":"t1_ctrqr","edited":false,"id":"ctrtb","gilded":0,"distinguished":null,"retrieved_on":1473807852,"timestamp_epoch":1566236761,"message_id":"10349-91c9af4c-78c0-4037-bc3b-35213eb51bb1-1566236761"}