{"controversiality":0,"body":"Try it out for 5 minutes and x and xs will be natural. (first:rest) may be easier to read if you don't know x:xs notation, but it's more important to be easy for programmers who use this for more than 5 minutes.\r\n\r\nIf you have a function which uses two lists:\r\n\r\n    f (x:xs) (y:ys) = ...\r\n\r\ncould be:\r\n\r\n    f (first1:rest1) (first2:rest2) = ...\r\n\r\nBut this is much harder to read.\r\n\r\nThis x:xs style is used in Haskell because functions often use abstract data: lists of a instead of lists of Ints. So you can do:\r\n\r\n    f :: [x] -&gt; x\r\n    f (x:xs) = ...\r\n\r\n(first line is type declaration: [x] -&gt; x is a function from lists of x to x).\r\n\r\nyou could use:\r\n\r\n    f :: [first] -&gt; first\r\n\r\nbut this doesn't make much sense.","subreddit_id":"t5_2fwo","stickied":false,"link_id":"t3_u0r5","subreddit":"programming","score":1,"ups":1,"created_utc":1165748875,"author_flair_css_class":null,"author":"julesjacobs","author_flair_text":null,"parent_id":"t1_cu9sd","id":"cubf0","edited":false,"gilded":0,"distinguished":null,"retrieved_on":1473808218,"timestamp_epoch":1566236765,"message_id":"19980-48c32ed6-b9f8-4c65-8bf8-be57e38d9cdd-1566236765"}