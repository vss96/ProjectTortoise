{"controversiality":0,"body":"The author makes the common mistake to use line count as a measure for productivity. \r\n\r\nWriting one line of Haskell code takes a lot more time then writing one line of Java code. One line of Haskell code can (in average) do much more then a line of Java code and thus requires more thinking.\r\n\r\nI have a DSL for compiler design which allowed me to write a whole ML-style type inferencer in about 40 lines of code. But it still took me about 20 hours to design it and to have it work correctly. In Java writing 40 lines of correct code usually take much less time - but of course you would need much more lines to archive the same in Java (I suspect around 1000).\r\n\r\nMore powerful languages reduce the time to write the code and also save you some time because they can automatically do things you have to write yourself in a less powerful language. But analyzing the problem still requires the same time. \r\n\r\nSo please stop confusing line count with productivity. The only valid measure is the time it takes to build a working implementation.\r\n\r\nAbout accidental complexity: The main source for a.c. in a language like Java is optimization. Without optimization a.c. can massively reduced, but the program will be unusable slow. It would be interesting to know how fast a 'elegant' Haskell program is in practice and if it is necessary to do 'ugly' things to make it perform reasonable.","subreddit_id":"t5_2fwo","stickied":false,"link_id":"t3_twtt","subreddit":"programming","score":57,"ups":57,"created_utc":1165458097,"author_flair_css_class":null,"author_flair_text":null,"author":"kawa","edited":false,"id":"ctxdd","parent_id":"t3_twtt","gilded":0,"distinguished":null,"retrieved_on":1473807954,"timestamp_epoch":1566236762,"message_id":"12975-3b8663bb-023c-49f3-b85d-0b49fed5ab6d-1566236762"}