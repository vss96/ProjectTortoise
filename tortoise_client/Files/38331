{"body":"&gt; Do decorators do anything that isn't captured by these two scenarios: a) composing 'f' with a function to modify its arguments, or b) composing a result modifier with 'f' ?\r\n\r\nMost certainly;  i can think of:  memoization, various kinds of registration (RPC/HTTP handlers, generic function methods/implementations, interfaces and adaptors, callbacks), selective debugging, tracing or compilation (Psyco), managing context (locks, transactions), execution scheduling (Twisted's defgen and similar), a [poor man's block syntax](http://glyf.livejournal.com/51957.html), or even pseudo-monadic lifting (`@partial(partial, map)`).\r\n\r\nNote that the point of decorator syntax is still *syntax*, though, not composition.  Decorator syntax would allow you to write both:\r\n\r\n    f_ (x,y) = x + y\r\n    f        = (f_ .) . annotate\r\n\r\nand:\r\n\r\n    f_ (x,y) = x + y\r\n    f        = annotate . f_\r\n\r\nas:\r\n\r\n    @annotate\r\n    f (x,y) = x + y\r\n\r\nwithout regard to whether `annotate` modifies the arguments, result, or does something completely different.","controversiality":0,"subreddit_id":"t5_2fwo","stickied":false,"link_id":"t3_to4r","subreddit":"programming","score":1,"ups":1,"created_utc":1165370765,"author_flair_css_class":null,"author_flair_text":null,"author":"pjdelport","edited":false,"parent_id":"t1_ctr6q","id":"cts2a","gilded":0,"distinguished":null,"retrieved_on":1473807857,"timestamp_epoch":1566236761,"message_id":"10476-9454290f-cfaa-4659-b8f2-2a3425aa7e8e-1566236761"}