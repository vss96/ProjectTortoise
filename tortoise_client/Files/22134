{"retrieved_on":1473808653,"distinguished":null,"gilded":0,"parent_id":"t1_cuyc9","id":"cuyli","edited":false,"author_flair_text":null,"author":"sickofthisshit","created_utc":1166216617,"author_flair_css_class":null,"score":-5,"ups":-5,"subreddit":"programming","stickied":false,"link_id":"t3_uu7k","subreddit_id":"t5_2fwo","body":"Yes, I did read it. And the reasons given for management's decisions are unsympathetic. The article assumes (even if you only read the first sentence), that \"major improvements\" are reasonably likely---i.e., that there is a silver bullet. Management behavior is assumed to be short-sighted \"hill climbing.\" It posits an incremental rewrite approach could be successful, ignoring the huge interactions that are typical in software systems. The reason he claims this strategy is avoided is interdepartmental turf fighting. He claims massive productivity gains are forgone because of budget-fighting battles, or because a line manager can't get upper level management to fund training.\r\n\r\nThere are real economic reasons that adopting new languages, basically just to be trendy, doesn't make sense. Principally because even a hypothetical four-fold improvement in some small fraction of development is overwhelmed by the problems of getting a real understanding of requirements, delivering complicated products to customers, fitting into pre-existing software environments, and all the other stuff that makes the software business hard. \r\n","controversiality":0,"timestamp_epoch":1566236769,"message_id":"31382-c06ff74b-fb50-4591-b18a-517025280891-1566236769"}