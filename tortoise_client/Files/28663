{"subreddit":"programming","created_utc":1165420229,"author_flair_css_class":null,"ups":8,"score":8,"body":"1. Agreed.  Python has more users; Ruby has nicer users. Neutral.\r\n2. Django's documentation is way ahead of Rails' documentation.  It has good, readable, well formatted online documentation, including tutorials, code snippets, API references complete with examples for essentially everything, and a place to ask questions on every page of online documentation.  On top of that they're about half way through writing the canonical (and good) book, which they're giving away.  My experience with Rails is that the online documentation is mediocre, but you're encouraged to go buy the book.  Positive.\r\n3. The Django templating system bends over backwards to prevent you from treating it like PHP, by, for instance, throwing exceptions if you try to make a function call that modifies the database and making you explicitly create \"tags\" for functions you want to be callable.  In Rails you can basically write arbitrary code in the templates (views). Positive.\r\n4. If both languages are just as rapid at prototyping, should you go with the one that executes faster, considering that it'll likely go into production?  Positive.\r\n5. The Django admin interface allows you to view and manipulate data as it is defined in your app, not in your database, complete with all the validation rules, display properties, and calculated fields defined in the app.  If your data entry people aren't the same as your developers, it is incredibly useful.  On top of that, the admin site can be put straight into production for simple sites without having to bother writing the ton of code that would reproduce its functionality.  The Django admin interface is completely optional as a plug-in type application, so there is no bloat.  Positive.\r\n6. Generic views and fields are better than scaffolds.  They allow you to do things like group, display, and paginate by date without writing any code.  On top of that, you can define your own generic views to produce common behavior if that makes sense for your application.  Positive.\r\n7. My host of choice allows neither, so I can't really comment.  Neutral.\r\n8. Doesn't bug me much one way or the other.  Neutral.","controversiality":0,"stickied":false,"link_id":"t3_tsel","subreddit_id":"t5_2fwo","gilded":0,"retrieved_on":1473807901,"distinguished":null,"author_flair_text":null,"author":"inkieminstrel","edited":false,"id":"ctugh","parent_id":"t1_ctt79","timestamp_epoch":1566236761,"message_id":"11608-ffe4dd70-509a-41fc-a013-cbad193b13af-1566236761"}