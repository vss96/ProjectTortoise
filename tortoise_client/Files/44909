{"created_utc":1167475584,"author_flair_css_class":null,"score":3,"ups":3,"subreddit":"programming","stickied":false,"link_id":"t3_wg2y","subreddit_id":"t5_2fwo","controversiality":0,"body":"I think of monads like this:\r\n\r\nHaskell is a pure functional language.  That means no side effects, so there is no concept of \"do x, followed by y\".\r\n\r\nBut there are lots of times when you need to say \"do x, followed by y\".  IO is the obvious one, but parsers are another, and of course there are lots more.  So Haskell programmers have re-invented this as the \"monad pattern\".\r\n\r\nThe neat thing about treating this as a pattern rather than a built-in feature of the language is that you get to invent your own rules for propogating side effects.  So a full description of a monad is \"do x followed by y in context c\".  The monad defines the context.\r\n\r\nThink about parsing.  The Parser monad lets you say \"parse x followed by y\".  If the parse of \"y\" fails then the whole parse fails as well.  Parsing involves side effects.  The obvious one is that the input gets consumed, but there might also be a line counter being run as well, or a symbol table being updated.  If \"x\" defined a new symbol then you don't want that symbol staying in the table if the parse of \"x\" failed.  So the Parser monad manages these side effects for you.  If a parser rule fails then any side effects are *guaranteed* to be unwound automatically.\r\n\r\nSo this is the power of monads: you can define your own rules for propogating side effects.  At first most programmers find it difficult to see why they might want to do this (thats the Blub paradox) because every language they have ever used has used what Haskell calls the IO monad.  But then you write a parser, and then you write something that needs backtracking, and then things start to fall in to place.","retrieved_on":1473809673,"distinguished":null,"gilded":0,"id":"cwg6p","edited":false,"parent_id":"t3_wg2y","author_flair_text":null,"author":"paulajohnson","timestamp_epoch":1566236780,"message_id":"58498-d0c98c00-cfd7-4abf-ac3d-23655a621cdc-1566236780"}