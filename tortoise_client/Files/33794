{"subreddit":"programming","created_utc":1166137431,"author_flair_css_class":null,"score":67,"ups":67,"controversiality":0,"body":"Java arose as a reaction to C++, and the incredible ease with which you could blow your foot off. Remember the timing too; Java predates effective STL, and while I don't know when the auto pointer was invented I'm pretty sure it wasn't common practice yet. The C++ of today is still a dangerous power tool but it's much more possible to use it relatively safely today.\r\n\r\nJava's solution to the problem of C++ allowing you to blow your foot off was to chop off your legs. Operator overloading? You might abuse it... __chop__. Multiple inheritance? You might abuse it... __chop__. Creating a new object? You'd best type the type of the object three or four times before we'll believe that you got it right. You want access to internals, subclass the compiler objects, closures, iterators, lazy evaluation, the list goes on __chop chop chop__\r\n\r\nIt's often hard to point to a language's philosophy because it is embodied in a long sequence of little decisions that are easy to dismiss in isolation, but that's how I see the philosophy of Java.\r\n\r\nOf course, that didn't work, so a large aftermarket in prostheses has sprung up, and lately the language has been sort of growing some of the power features it previously rejected, although they pretty are much bolted on. Many people have even forgotten that there is a whole world full of people who don't get around in powered wheelchairs and don't need machines to help them chew, and argue passionately about how much they love their Chewing Completion and Integrated Mobility Environments and how easy it is to sort of slowly shamble up stairs on these prosthetic legs (which sounds impressive after you've spent five years in a wheelchair), endlessly haranguing those who choose to run on their own two feet about what they are missing by not getting their legs chopped off.\r\n\r\nNow, this is music to the ears of Enterprise software, who is willing to throw umpteen bajillions of programmers at simple problems, and they consider it more important that the tools that army has be soft and weak, so they can't get themselves into trouble. This philosophy is probably not terribly successful in the long run either, but I think it explains why Java succeeded in the Enterprise space despite initially being neither designed nor marketed for that space.\r\n\r\nBut to someone who is skilled at programming, who sees it as a craft to be perfected, Java is a deliberately crippled anathema. And this is the crowd here at reddit.\r\n\r\nI don't want a language that chops my legs off. And personally, I don't really want a power tool with no safeties (C++), though I can understand the appeal to people with more industrial tendencies. I want power tools that are also easy to use safely, and I don't mind that it may take a bit of training, practice, and thought to use to their full potential.\r\n\r\n(I'm not even going to offer this assessment as truth. This is simply how I see Java, as someone who has deliberately chosen not to become skilled in the libraries so I can't get a job doing Java. I _do_ know the language, so this isn't complete ignorance speaking. I'll do just about anything before I do Java. Even C# is starting to look tolerable with some of that very non-Java stuff in 3.0.)","stickied":false,"link_id":"t3_utqb","subreddit_id":"t5_2fwo","gilded":0,"retrieved_on":1473808564,"distinguished":null,"author":"jerf","author_flair_text":null,"parent_id":"t1_cutqd","edited":false,"id":"cutv1","timestamp_epoch":1566236769,"message_id":"29158-ab035147-a897-48e0-86a4-fb9654334eb6-1566236769"}