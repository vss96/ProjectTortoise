{"retrieved_on":1473808447,"distinguished":null,"gilded":0,"id":"cunkg","edited":false,"parent_id":"t3_ujj3","author":"sethg","author_flair_text":null,"created_utc":1165978208,"author_flair_css_class":null,"score":5,"ups":5,"subreddit":"programming","stickied":false,"link_id":"t3_ujj3","subreddit_id":"t5_2fwo","body":"Look at [the chapter headings in the SICP book](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-4.html#%_toc_start):\r\n\r\n1. Building Abstractions with Procedures\r\n1. Building Abstractions with Data\r\n1. Modularity, Objects, and State\r\n1. Metalinguistic Abstraction\r\n1. Computing with Register Machines\r\n\r\nIn other words, SICP teaches you programming by first teaching you how to write Scheme, and then teaching you how to implement it.  Scheme is powerful enough to not be a toy language, but simple enough that this curriculum can fit into a one-semester MIT class for undergraduates who may not have had any prior programming experience (or, worse, whose only prior programming experience was in BASIC).\r\n\r\nFor *this kind of* programming class, Haskell wouldn't work.  Implementing Haskell in Haskell is, I suspect, more appropriate for grad students.\r\n\r\nI had a fun and mind-blowing experience taking SICP as an undergrad, and I'm having a fun and mind-blowing experience learning Haskell now.  Can't we all just get along?","controversiality":0,"timestamp_epoch":1566236767,"message_id":"26248-7056bea1-c46e-457d-955f-3eafb7f363b1-1566236767"}