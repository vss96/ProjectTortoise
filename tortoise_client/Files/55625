{"gilded":0,"distinguished":null,"retrieved_on":1473809538,"author_flair_text":null,"author":"[deleted]","id":"cw90d","edited":false,"parent_id":"t3_w820","subreddit":"programming","score":13,"ups":13,"author_flair_css_class":null,"created_utc":1167315195,"body":"I use Python -- a lot -- and I find very little \"wrong\" with Python's standard library.  That said, there are a few warts that I can think of:\r\n\r\n* Dual modules for C/Python implementations of the same feature: pickle/cPickle, StringIO/cStringIO, etc.  This leads to annoyingly repetitive code to check for the C version and fall back on the pure-Python one.\r\n* A number of basically essential Python libraries aren't included in the stdlib (possibly because of licensing or permission issues).  The first thing nearly every Python programmer does (or should do) after getting a new system is install PIL, wxPython, feedparser, httplib2, and some other essentials. They should just be bundled.\r\n* Some superseded modules are still hanging around.  The rfc822 library has been completely replaced by the email package; there's urllib and urllib2; etc.\r\n* In a few cases there's too much granularity; I always expect to be able to parse URLs with urllib(2), but no, that's in urlparse.\r\n\r\nI actually don't find inconsistent naming to be all that big a deal; you're gonna have to read the docs the first time you use a module anyway, so you find the name there.\r\n\r\nAll pretty minor quibbles -- and some that Py3K will address -- so I'm obviously pretty damn happy with Python's stdlib.","controversiality":0,"subreddit_id":"t5_2fwo","link_id":"t3_w820","stickied":false,"timestamp_epoch":1566236779,"message_id":"54861-47891a65-7681-4a39-90c9-2f0dad36971a-1566236779"}