{"subreddit_id":"t5_2fwo","link_id":"t3_ujj3","stickied":false,"body":"That's brilliant. Thanks you (and eclig) very much for your efforts and links.\r\n\r\nTo clarify my understanding then, there are three ways in which you can pass expressions into a form (loose terminology here perhaps):\r\n\r\n- as an evaluated value (used for function in applicative order language, e.g. scheme)\r\n\r\n- as a lazily-evaluated value (used for function in lazy language, e.g. haskell, can also get this in scheme by evaluating the argument \"on demand\" in a macro)\r\n\r\n- as the expression itself - \"code as data\" lisp/scheme macros, to be examined, transformed or evaluated as the code sees fit.\r\n\r\nAnd this last is the root of the whole \"but we like our language written as a syntax tree\" point of the lisp/schemers.","controversiality":0,"score":3,"ups":3,"author_flair_css_class":null,"created_utc":1166182342,"subreddit":"programming","edited":false,"id":"cuw13","parent_id":"t1_cutzn","author":"jbert","author_flair_text":null,"distinguished":null,"retrieved_on":1473808604,"gilded":0,"timestamp_epoch":1566236769,"message_id":"30176-e6e65f2f-5374-4047-b8df-bdc7aafd379d-1566236769"}