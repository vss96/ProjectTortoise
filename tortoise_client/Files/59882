{"subreddit":"programming","created_utc":1167343141,"author_flair_css_class":null,"score":2,"ups":2,"body":"One thing about type inference in H-M style systems: it's undecidable in the general case when existential types are introduced.  There may even be a proof this somewhere for the Standard ML module system.  ML has always been designed to allow full use of type inference with no explicit annotations normally, but it does so by requiring them in module signatures.\r\n\r\nHaskell operates differently, because its modularity on the type level is controlled through type-classes.  It also has a more \"interesting\" type system than SML.  There are cases where the class overloading is undecidable without annotations.  In general, I find it is best practice to insert type annotations for top-level functions -- particularly exported ones.  Also, Haddock relies on them for documentation purposes.\r\n\r\nGHCi or hugs can automatically generate a type annotation for you, and if cleaning it up you can factor out a useful type synonym usually; that will help future maintainers and users by naming the concept a type represents.\r\n","controversiality":0,"stickied":false,"link_id":"t3_w79v","subreddit_id":"t5_2fwo","gilded":0,"retrieved_on":1473809569,"distinguished":null,"author_flair_text":null,"author":"ricercar","edited":false,"id":"cwaml","parent_id":"t1_cwa3i","timestamp_epoch":1566236779,"message_id":"55636-9768c955-afa9-43ce-bf77-33ed26be3cdd-1566236779"}