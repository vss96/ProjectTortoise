{"body":"&gt; They don't all have to lock it, though. Threads that execute bytecode or C/Python API calls do\r\n\r\nExACTly.  What I want to do is multi-thread my Python.  I can already multi-thread my C code.\r\n\r\n&gt; In other words, pretty much the only way for the GIL to become your bottleneck is to have multiple, interdependent threads doing heavy, non-I/O number-crunching in pure Python on a multi-core machine that is otherwise standing idle\r\n\r\nNot at all.  It doesn't have to do with number-crunching, it has to do with executing ANY Python code.  An example is an event queue, and you want multiple threads to be able to grab the top event, grab the needed objects, and do some kind of operation on them.  Specifically, a MMOG.\r\n\r\nIt's ridiculous that I can't get a speedup by adding more CPUs.\r\n\r\n&gt; Otherwise, if your OS has shared memory, use POSH to share objects between processes. (Still Python-level speed, but very little code modification.)\r\n\r\nAh!  POSH!  I looked at it a while back but had read that people had problems with it (latest is 2003) in modern Python versions.  I just tried it and it seemed to work (except the ProducerConsumer.py example).\r\n\r\nI will look into it further -- it might just do the trick.  Thanks!\r\n\r\n&gt; If all else fails, restructure your application to use message passing. (Something you have to do anyway if you ever want to scale beyond a single machine.)\r\n\r\nYes, but there's no reason for a multi-core processor to inflict all that overhead on itself *until* you need to go over the wire, and then accept the slow transmission time, writing/reading/copying time, and extra latency.\r\n\r\nSerializing and de-serializing any large Python object as part of one CPU talking to another... *shudder*\r\n","controversiality":0,"stickied":false,"link_id":"t3_t1qf","subreddit_id":"t5_2fwo","subreddit":"programming","created_utc":1165004093,"author_flair_css_class":null,"score":1,"ups":1,"author_flair_text":null,"author":"lemmikins","edited":false,"id":"ct9uh","parent_id":"t1_ct81q","gilded":0,"retrieved_on":1473807514,"distinguished":null,"timestamp_epoch":1566236758,"message_id":"2001-7e49f14c-6f05-4cbe-9377-5a929bb750ce-1566236758"}