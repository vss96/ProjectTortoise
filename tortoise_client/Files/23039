{"id":"cv265","parent_id":"t1_cv0i1","edited":false,"author_flair_text":null,"author":"apotheon","retrieved_on":1473808721,"distinguished":null,"gilded":0,"stickied":false,"link_id":"t3_uvma","subreddit_id":"t5_2fwo","body":"&gt; You could argue Perl(5) here - debatable but think it is fair to say PHP(5!) has a more straightforward object model - not more powerful but more consistently designed / less tacked on.\r\n\r\nI'd say that PHP's object model may arguably be more consistently designed -- it's hard to make a clear determination on that point.  I certainly wouldn't say it's less \"tacked on\", though.  Perl's object model is built entirely using features of Perl that already existed, with a little bit of syntactic sugar to eliminate some repetitive coding.  PHP's, meanwhile, is like an alien growth that sprang fully formed from PHP's cranium.\r\n\r\n(edit:  Oh, yeah, and you said \"It's object model actually more powerful than in some other common languages.\"  You then only came up with one example, which you said was actually not less powerful than PHP's object model.  Wanna rephrase the original statement?)\r\n\r\n&gt; Rather than \"walk\" would suggest \"use the bus\" in you analogy.\r\n\r\nI'd rather walk, thanks.  Have you been on a bus lately?  Holy creepy experiences, Batman.\r\n\r\n&gt; I presume the initial intention was making PHP easier - perhaps it does for absolute beginners?\r\n\r\nBASIC took the \"dumb it down to make it easier, sacrifice linguistic correctness and power\" approach, too.  I don't like it there, either.\r\n\r\n&gt; Does Python have to assign memory to hold doc strings? You might argue that a case against doc strings.\r\n\r\nNot really.  It may be a case against using them in certain specific instances, but not a case against including the feature in the language.\r\n\r\nDocumentation is an important part of programming -- one that is all too often neglected.  Anything that makes that easier, both for the programmer that documents the code and anyone who comes along later and wants to read it, is a good thing (all else being equal).  Considering the increasing prevalence of languages that support that sort of thing, notably including Perl (from which PHP originated, in fact), it's kind of a huge oversight to ignore it.\r\n\r\n&gt; The standard use case for PHP is for web applications moving data from DB to HTML. The most complex data set you generally have to deal with is a list of hashes (SELECT result set).\r\n\r\n. . . and yet, PHP advocates are always willing to trot out the example of complex software with complex data handling needs like MediaWiki.\r\n\r\n&gt; Theres a more general point here - PHP was not intended to be a general purpose programming language but designed for the web.\r\n\r\nOriginally, yes -- and within the original intent of the language (or framework, going back even earlier) it does its job well.  It has become a language with the earmarks of a general purpose programming language, however, and is billed that way.  Articles are springing up about how to use it for system administration scripts, for instance.  In terms of tasks to which its maintainers, fans, and commercial distributors say it should be applied, it has grown beyond those humble roots.  In terms of the power and reliability of its design, on the other hand, it has not.","controversiality":0,"created_utc":1166310005,"author_flair_css_class":null,"score":2,"ups":2,"subreddit":"programming","timestamp_epoch":1566236770,"message_id":"32938-493bb1ef-7a53-4384-81f4-73c136085023-1566236770"}