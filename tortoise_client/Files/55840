{"body":"Bzzt.  Thanks for playing.  There's nothing wrong with Java here.  There's a hint in TFA, in Gary Tarolli's email: \"Ah those were the days - fast integer and slow floating point....\".  News flash: Those days are over.\r\n\r\nPlease try comparing the given fast InvSqrt with a straight C 1.0f/sqrtf(x) implementation and let us know what you get.\r\n\r\nHere's what I get, for 10 million iterations:\r\n\r\n    C, 1.0f/sqrtf(x):           282668 us\r\n    C, \"fast\" InvSqrt:         1098150 us\r\n    Java, 1.0f/Math.sqrt(x):    308063 us\r\n    Java, fastinv w/rawintbits: 727028 us\r\n\r\nHmm.  Java comes out rather well.  If there's any problem there, it's the lack of a sqrtf equivalent (Math.sqrt takes/returns a double).","controversiality":0,"subreddit_id":"t5_2fwo","stickied":false,"link_id":"t3_t9zb","subreddit":"programming","score":9,"ups":9,"created_utc":1165188276,"author_flair_css_class":null,"author_flair_text":null,"author":"filesalot","edited":false,"parent_id":"t1_ctd6h","id":"cthmd","gilded":0,"distinguished":null,"retrieved_on":1473807662,"timestamp_epoch":1566236759,"message_id":"5571-c1119fca-bff4-4683-8229-4bf05280b267-1566236759"}