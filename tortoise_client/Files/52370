{"distinguished":null,"retrieved_on":1473808070,"gilded":0,"parent_id":"t1_cu3hj","edited":false,"id":"cu3la","author_flair_text":null,"author":"etrepum","score":8,"ups":8,"author_flair_css_class":null,"created_utc":1165577084,"subreddit":"programming","subreddit_id":"t5_2fwo","link_id":"t3_u2ng","stickied":false,"controversiality":0,"body":"You also have to ignore preemptive scheduling versus cooperative scheduling. Almost everything in Erlang is designed to be non-blocking, so you get soft real-time semantics. In Stackless cooperation with other tasklets is explicit unless you're using the watchdog in which case it's just... unreliable, because the watchdog works by counting VM instructions, and a lot of expensive operations in Python happen at a lower level in C code so it can prevent task switches.\r\n\r\nI know that CCP works around all of these shortcomings in one way or another.. but they're not using Stackless, they're using Stackless plus a large body of framework code and domain knowledge that practically nobody outside CCP has access to.\r\n\r\nErlang gives you everything you actually need (for concurrent programming) right out of the box, as all open source components. I found it very approachable after I read Joe Armstrong's thesis paper and then tried actually writing code with the language. I'm very fond of Python and Stackless (having contributed code to both and still using Python for the majority of my code) but I found out that in the real world Erlang was a huge win for a very business critical part of my application. I chose Erlang because I didn't have to reinvent the wheel. Had I chosen something based on Stackless or greenlets I'd have to basically build a bad version of Erlang/OTP from scratch by myself. Instead I ended up learning a whole lot about how a different community of programmers build robust applications, and I ended up with an app that I'm very happy with and that's very easy to maintain.\r\n\r\nYes, the syntax is funny. Especially getting used to ending statements with one of three different kinds of punctuation depending on what the next statement is (if any). However, you get used to it quickly.. not unlike getting used to whitespace in Python.","timestamp_epoch":1566236763,"message_id":"15762-9219eafa-711a-486a-bf94-a31cbfb74ffc-1566236763"}