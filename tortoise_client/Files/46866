{"distinguished":null,"retrieved_on":1473809421,"gilded":0,"edited":false,"parent_id":"t1_cvbnk","id":"cw2v0","author":"pl0nk","author_flair_text":null,"score":2,"ups":2,"author_flair_css_class":null,"created_utc":1167159786,"subreddit":"programming","subreddit_id":"t5_2fwo","link_id":"t3_v6rx","stickied":false,"controversiality":0,"body":"&gt; when do I stop worrying about managing my heap memory\r\n\r\nYeah, managing heap storage does take some care.  If you find yourself doing a lot of manual heap management that seems routine, you might look into smart pointer classes.  boost's scoped\\_ptr and shared\\_ptr are a great starting point, and give you sensible copy semantics so you don't have to write your own copy-ctor/dtor/assginment just cause you're using the heap.\r\n\r\n&gt; and exception safety\r\n\r\nStrong exception safety is a big deal in any language.  Making sure to not leak storage is only part of it; making sure your program remains in a consistent state is the part that really takes some care, and that's true in every language I'm familiar with.\r\n\r\nhttp://en.wikipedia.org/wiki/Exception_handling#Exception_safety\r\n\r\nFor the \"don't leak storage\" part, smart pointers again can help you out; I believe this is what std::auto\\_ptr was invented for, in fact.","timestamp_epoch":1566236778,"message_id":"51529-a734eac3-3a93-4bf2-ab78-2073de7c819a-1566236778"}