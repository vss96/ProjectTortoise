{"created_utc":1167532827,"author_flair_css_class":null,"score":1,"ups":1,"subreddit":"programming","stickied":false,"link_id":"t3_wg2y","subreddit_id":"t5_2fwo","body":"In Haskell a function is pure, if the result of the function only depends of its input. This is true for all functions which are not executing in the IO monad. \r\n\r\nSo you can use the IO monad to get some value (by calling an impure function like readLine), then process this data with a pure function (lets call them 'process') and then write the result out with another impure function like putStrLn. The whole read-process-write function is obviously also impure, because they consists of two impure functions and has to be executed in the IO monad too. Only the 'process' function is pure and can executed outside the IO monad and can be used in other pure functions but also in impure ones.\r\n\r\nIt's like using the IO monad 'taints' a function, making it impure. And each 'tainted' function also taints all functions which needs to call it.\r\n\r\nIf you're writing something with OpenGL then you have to put most of your code in the IO monad: Each function which needs to read or write something from the GL state. \r\n\r\nAlso all functions which call a function which need to access the GL state has to be in the IO monad. Only code which is 'pure' and only processes data totally independent of OpenGL can be handled without using monads - but for most real world algorithms you still require to store some mutable state. This is handled best by using some monad again, maybe a state-monad or by using the IO monad to have access to MVars or IORefs which also allow you to store mutable state.\r\n\r\nYou can read more about the topic and the problems [here](http://programming.reddit.com/info/w79v/comments) if you haven't yet. \r\n","controversiality":0,"retrieved_on":1473809712,"distinguished":null,"gilded":0,"edited":false,"id":"cwicl","parent_id":"t1_cwhzb","author":"kawa","author_flair_text":null,"timestamp_epoch":1566236780,"message_id":"59515-494ebab8-cecf-40a3-8a4c-61fdd027e63e-1566236780"}