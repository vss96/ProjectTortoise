{"gilded":0,"retrieved_on":1473808078,"distinguished":null,"author":"rmtew","author_flair_text":null,"id":"cu41h","edited":false,"parent_id":"t1_cu3la","subreddit":"programming","author_flair_css_class":null,"created_utc":1165586524,"score":0,"ups":0,"controversiality":1,"body":"&gt; You also have to ignore preemptive scheduling versus cooperative scheduling. Almost everything in Erlang is designed to be non-blocking, so you get soft real-time semantics. In Stackless cooperation with other tasklets is explicit unless you're using the watchdog in which case it's just... unreliable, because the watchdog works by counting VM instructions, and a lot of expensive operations in Python happen at a lower level in C code so it can prevent task switches.\r\n\r\nSo what you are saying is that Erlang preemptively schedules?  And that you personally find preemptive scheduling more reliable.\r\n\r\nWell I personally find cooperative scheduling more reliable.  For the code to be reliable, you have to know where a call you make is going to block.  And knowing where you are going to block, you have to check all the conditions which might have changed and handle them appropriately.  But that isn't domain specific knowledge.  I would expect it is something anyone who has to deal with cooperative scheduling has to deal with.  And CCP workarounds for this?  There are none.  But we end up using very little locking in our code base because of the reliability which cooperative scheduling affords us.\r\n\r\nI assume that the Erlang processes are reliable with preemptive scheduling because of the message passing concurrency.\r\n\r\nAnd to address part of your claim about a large body of framework specific code.  We have released our modified version of the [uthread module](http://svn.python.org/view/stackless/sandbox/libraries/uthread-ccp/uthread.py?view=markup), which implements tasklet locking, methods for starting tasklets in ways to suit the situation and more.  We gave [a presentation](http://www.stackless.com/Members/rmtew/News%20Archive/newsPyCon2006Pres) at PyCon detailing some of the domain specific knowledge, BeNice and why we use it, how we use the scheduler and so forth.  And helped out with a module which implements this (also in the Python SVN sandbox).\r\n\r\nBut..\r\n\r\n&gt; I know that CCP works around all of these shortcomings in one way or another.. but they're not using Stackless, they're using Stackless plus a large body of framework code and domain knowledge that practically nobody outside CCP has access to.\r\n\r\nWhile I disagree that what CCP does in its code base is necessarily working around shortcomings, without reasonable qualification as to what exactly are considered shortcomings, I do agree that in order to use Stackless it is prohibitively hard unless you have the required domain specific knowledge (namely experience doing it with Stackless before).\r\n\r\n&gt; Erlang gives you everything you actually need (for concurrent programming) right out of the box, as all open source components. I found it very approachable after I read Joe Armstrong's thesis paper and then tried actually writing code with the language. I'm very fond of Python and Stackless (having contributed code to both and still using Python for the majority of my code) but I found out that in the real world Erlang was a huge win for a very business critical part of my application. I chose Erlang because I didn't have to reinvent the wheel. Had I chosen something based on Stackless or greenlets I'd have to basically build a bad version of Erlang/OTP from scratch by myself. Instead I ended up learning a whole lot about how a different community of programmers build robust applications, and I ended up with an app that I'm very happy with and that's very easy to maintain.\r\n\r\nNo surprise to me whatsoever.\r\n\r\nHowever, I feel obliged to comment on the part about when you found it approachable.  Whenever I have tried to go to the Erlang web site and read the documentation linked there, given no knowledge about Erlang, I have always walked away only having been able to find confusing documents which seem to have been written to satisfy management criteria.  So I'll take the thesis mention as a recommendation of a good starting point.","link_id":"t3_u2ng","stickied":false,"subreddit_id":"t5_2fwo","timestamp_epoch":1566236763,"message_id":"15921-1bf7e60f-45b3-46bc-9d96-6088dcc03e0b-1566236763"}