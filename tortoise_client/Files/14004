{"gilded":0,"distinguished":null,"retrieved_on":1473808380,"author_flair_text":null,"author":"jbert","edited":false,"id":"cuk01","parent_id":"t1_cujum","subreddit":"programming","score":4,"ups":4,"created_utc":1165923023,"author_flair_css_class":null,"body":"One of the most annoying things for me in scheme is that there is a difference between special forms and functions. Why can't I write (apply and '(#t #t #f))? [I think I know why, but it sucks.]\r\n\r\nscheme has first class functions, but which forms are functions and which are special? Learning that is more annoying than learning syntax (and it isn't fixed - libraries can introduce additional special forms). Here the overly-regular syntax, i.e. using (x a b) to apply both functions x and special forms x hinders understanding.\r\n\r\nThe paper points out that you don't need special forms in a lazily-evaluated language. That's a big win in my book.\r\n\r\nPlease tell me I'm missing something. I like scheme a lot, but this annoys me.\r\n\r\nEdit: Did I mention it was annoying? ;-)","controversiality":0,"subreddit_id":"t5_2fwo","stickied":false,"link_id":"t3_ujj3","timestamp_epoch":1566236767,"message_id":"24536-edcabf61-9912-402a-8afe-666be19887cc-1566236767"}