{"body":"1. Putting some value in the monad with `return`, then getting it out again with &lt;-, should result in an identical value. (`return x &gt;&gt;= f == f x`)\r\n\r\n2. Getting a value out of the monad with &lt;-, then putting it back in with `return`, should result in an identical value. (`m &gt;&gt;= return == m`)\r\n\r\n3. Arbitrarily nesting blocks should have no effect on the semantics of your code. (`(m &gt;&gt;= f) &gt;&gt;= g == m &gt;&gt;= (\\x -&gt; f x &gt;&gt;= g)`)\r\n\r\nBut the monad rules don't help you understand monads.  It's like saying \"for all a, b, and c, (a + b) + c == a + (b + c)\" in an attempt to explain addition.  The only places where the monad rules are useful are when you've created something and you're trying to figure out whether it's a monad or not, or if you're trying to prove some mathematical property about monads.","controversiality":0,"subreddit_id":"t5_2fwo","stickied":false,"link_id":"t3_u5jo","subreddit":"programming","score":7,"ups":7,"created_utc":1165815996,"author_flair_css_class":null,"author_flair_text":null,"author":"panic","edited":false,"parent_id":"t1_cudyw","id":"cuedf","gilded":0,"distinguished":null,"retrieved_on":1473808274,"timestamp_epoch":1566236765,"message_id":"21646-c33e9d39-29a3-44b5-9ff9-5142f8939762-1566236765"}