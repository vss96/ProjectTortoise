{"gilded":0,"retrieved_on":1473808382,"distinguished":null,"author":"dons","author_flair_text":null,"edited":false,"id":"cuk1y","parent_id":"t1_cujtk","subreddit":"programming","created_utc":1165924327,"author_flair_css_class":null,"score":7,"ups":7,"controversiality":0,"body":"Interesting idea. I guess if its not clear that getLine is side effecting (or the beginner is not aware of what side effects are), then they might make that mistake. \r\n\r\nOf course, you should be thinking about the types, not the syntax:\r\n\r\n    (++) :: [a] -&gt; [a] -&gt; [a]\r\n\r\n    getLine :: IO [Char]\r\n\r\nSo:\r\n\r\n    x ++ getLine ++ y\r\n\r\nDoesn't make sense. The getLine is *tainted* by IO, until you run it. And thus embedding a side effecting getLine inside an effect-free string isn't going to fly. Control those effects! Hence:\r\n\r\n    import Text.Printf\r\n\r\n    --\r\n    -- ok\r\n    --\r\n    greet = do\r\n        s ≺- getLine -- force the effect now\r\n        putStr (\"You're \"++ s ++\"years old! \\n\")\r\n        putStr (\"Congratulations! \\n\")\r\n\r\n    --\r\n    -- nicer\r\n    --\r\n    great = do\r\n        s ≺- getLine    -- simpler with printf\r\n        printf \"You're %s years old!\\n Congratulations\\n\" s\r\n\r\n    --\r\n    -- or use the underlying sequencing of bind\r\n    --\r\n    groat = getLine &gt;&gt;= printf \"You're %s years old!\\n Congratulations\\n\"","stickied":false,"link_id":"t3_ujjo","subreddit_id":"t5_2fwo","timestamp_epoch":1566236767,"message_id":"24563-80ffbff3-36b6-4db0-a334-f4bc9ba39b5c-1566236767"}