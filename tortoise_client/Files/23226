{"created_utc":1165466722,"author_flair_css_class":null,"score":8,"ups":8,"subreddit":"programming","stickied":false,"link_id":"t3_twtt","subreddit_id":"t5_2fwo","body":"I think the common mistake is to use line count as a measure of productivity where more lines of code mean more productivity. That is, naive and misguided schemes say that for code that performs a given task, the more lines of code the better (the more productive the programmers were).  What they do here is the opposite and is entirely appropriate: **for a given task** the fewer lines of code the better. I would love to have fewer lines of code without compromising functionality.\r\n\r\nAssuming readability isn't impacted (which is arguable to a certain extent with Haskell), fewer lines of code is **always** better, and is a good indicator of the code's maintenance and bugfixing cost in the future.\r\n\r\nNow what this post leaves out is a comparison of the resulting code's performance. The C++ version takes 14 times as much code... is it 14 times faster?","controversiality":0,"retrieved_on":1473807963,"distinguished":null,"gilded":0,"parent_id":"t1_ctxdd","id":"ctxta","edited":false,"author_flair_text":null,"author":"oxryly","timestamp_epoch":1566236762,"message_id":"13172-d3394da5-3d81-4847-89d4-56a8403e4963-1566236762"}