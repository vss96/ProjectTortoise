{"body":"Please don't call this ad-hoc polymorphism. In the case of C++ and Java, it's subtype/subclass polymorphism, in the case of Haskell, it's bounded parametric polymorphism.\r\n\r\nAd-hoc polymorphism is where you get polymorphic values by just defining a value (in an ad-hoc way) at multiple possibly unrelated types, and the compiler resolves which one of these it is going to use by examining the type of parameters passed. This kind of polymorphism doesn't usually result in the callers becoming polymorphic, and there's no additional interface framework to using the polymorphism, just anything can be defined multiple times so long as the types don't overlap.\r\n\r\nHaskell's typeclass system (which I'd refer to as bounded parametric polymorphism, due to the way that classes are used to restrict the set of types over which type variables range), can be used to simulate ad-hoc polymorphism in the degenerate case of having a class with a single method of a completely arbitrary type, but generally, one doesn't do this. Usually whole interfaces of functions must/should be implemented in order to implement a class, and usually there are additional restrictions on their types. Also, you end up with the ability for callers to inherit that polymorphism, and you have a means of expressing those constraints in their type signatures.\r\n\r\nWith subtype polymorphism, you again have an additional framework which makes things less than ad-hoc. The method that is called is a method of some subclass of C, and usually it cannot have just any type, but must have the same parameter and return types as C's method M.","controversiality":0,"subreddit_id":"t5_2fwo","link_id":"t3_t7v9","stickied":false,"subreddit":"programming","score":5,"ups":5,"author_flair_css_class":null,"created_utc":1164999953,"author":"cgibbard","author_flair_text":null,"parent_id":"t1_ct8x2","id":"ct9hg","edited":false,"gilded":0,"distinguished":null,"retrieved_on":1473807507,"timestamp_epoch":1566236758,"message_id":"1823-6ec60603-ac7c-4b43-9436-ba5d06b5486e-1566236758"}