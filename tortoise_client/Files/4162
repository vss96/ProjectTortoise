{"stickied":false,"link_id":"t3_tpb9","subreddit_id":"t5_2fwo","body":"Cool problem, thanks for the link. I can think of an exponential-time solution. I suspect that since the alphabet is limited to 2 characters and the target string is limited to 15, that this naive solution is acceptable. Anyway, the algorithm is as follows:\r\n\r\nDefine a directed graph where the nodes correspond to members of Sigma+, and the edges are the reversed rewriting sequences. So, if A and B are members of Sigma+, and the rewritten form of A has B as a substring, and no substring of A has this same property, then the node for B has a link to the node for A. Then you simply check if the node for your input string is reachable from the node for the target string.\r\n\r\nThis algorithm is O(a^n), where a is the size of the alphabet and n is the length of the target string. However, I suspect there is a polynomial time solution.","controversiality":0,"created_utc":1165352399,"author_flair_css_class":null,"ups":5,"score":5,"subreddit":"programming","id":"ctqvh","edited":false,"parent_id":"t1_ctplg","author":"procrastitron","author_flair_text":null,"retrieved_on":1473807834,"distinguished":null,"gilded":0,"timestamp_epoch":1566236761,"message_id":"9847-b79672fa-2418-4697-ade1-fea11af34e19-1566236761"}