{"edited":false,"id":"ctt79","parent_id":"t3_tsel","author":"derefr","author_flair_text":null,"retrieved_on":1473807878,"distinguished":null,"gilded":0,"link_id":"t3_tsel","stickied":false,"subreddit_id":"t5_2fwo","controversiality":1,"body":"Assertions taken in terms of conclusion:\r\n\r\n1. Python. Not a reason. Both Python and Ruby are thin wrappers for C (and therefore machine language), and so are pretty much equal. So is LISP, for that matter. Call me when we start writing genetic web apps. *Neutral.*\r\n\r\n2. Documentation. Python-ers, I suppose, like things to be GNUish. Ruby works more like the Apple world. Interested? Buy the book. *Neutral.*\r\n\r\n3. Look, we reinvented PHP again. Every \"templating system\" eventually evolves to the point where it becomes a programming language in its own right, and then has another templating system written in it. The only solution is not to play: rhtml is closer, but the best bet would be not keeping static globs of datastrings (the templates) around in the first place, and instead representing them as data structures. *Negative.*\r\n\r\n4. Speed. These are rapid *prototyping* languages. Speed is not the primary issue. There are other languages for that. *Neutral,* (unless you're into that sort of thing, in which case *Positive*).\r\n\r\n5. An SQL manager, which Rails apps assume you already have separately, but which Django assumes it should be for you. Framework bloat, by any other name, is a feature. *Negative.*\r\n\r\n6. Generic views and feeds, which in Rails are called \"scaffolds\" (which you *can* just use the controller portion of if you want). *Neutral.*\r\n\r\n7. Support. Server. Crap. Stop comparing eachothers' dads' penis sizes; they're not yours. Python wins are not Django wins, and Ruby wins are not Rails wins. *Neutral.*\r\n\r\n8. This is a negative argument, as far as I can tell. Ruby makes AJAX and XML-RPC easier. So it's more powerful, and people might use that power for evil? Well I'll be darned. *Negative.*\r\n\r\nMy slightly reddish-tinted glasses see 1 (possible) positive, 4 neutral, and 3 negative arguments for why Django kicks Ruby on Rails' collective ass. Not too bad; it would be the same with the product names reversed, I expect.","author_flair_css_class":null,"created_utc":1165394612,"score":-5,"ups":-5,"subreddit":"programming","timestamp_epoch":1566236761,"message_id":"11082-d39f1047-7a26-46fa-bc8f-05056eba28b0-1566236761"}