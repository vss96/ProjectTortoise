{"stickied":false,"link_id":"t3_uvma","subreddit_id":"t5_2fwo","body":"&gt; Give me some examples. I'm having trouble coming up with a single example that fits those requirements: common language, less powerful object model.\r\n\r\nYou could argue Perl(5) here - debatable but think it is fair to say PHP(5!) has a more straightforward object model - _not_ more powerful but more consistently designed / less tacked on. Reflection is PHP(5) is good and definately better than Javascript's or Perl's. With PHP(5) the object model is basically Java's but without the need for explicit typing.\r\n\r\n&gt; True namespaces aren't needed in any programming language, the same way cars aren't needed. We could always just walk everywhere.\r\n\r\nThat's exaggerating the point. Practically people do namespacing in PHP by prefixing the namespace to classes / function - it's annoying and lacks flexibility (e.g. import foo as bar) but it's not the end of the world. Rather than \"walk\" would suggest \"use the bus\" in you analogy.\r\n\r\n&gt;&gt; Case-sensitivity rules in PHP are pretty bizzare. But it's essentially a non-issue because you should never have two functions named the same but with a different case.\r\n&gt; . . . and yet, it's still a potential source of programming issues.\r\n\r\n...but very rarely - it's typically only a problem when in comes to stuff like remote method calls where that remote calling language does care about sensitivity. I presume the initial intention was making PHP easier - perhaps it does for absolute beginners?\r\n\r\n&gt;&gt; \"No \"doc strings\".\" I guess C++ sucks too. This a real stretch. I use phpdoc style comments and generate my documentation using phpDocumentator. It's a good system, I don't see the problem.\r\n&gt; I think you missed some important explanation there, when he said \"Documentation must either be maintained separately from the code, or by (rather finicky) 3rd-party code-level documentation interpreters.\"\r\n\r\nThis is a \"problem\" which applies to many many languages (javadoc?) but the earth hasn't stopping orbitting the sun. Does Python have to assign memory to hold doc strings? You might argue that a case against doc strings. Sure they're a nice feature  but \"serious shortcoming\" of PHP?\r\n\r\n&gt;&gt; \"The combination list/hash type causes problems by oversimplifying, often resulting in unexpected/unintuitive behavior.\" Bullshit.\r\n\r\n&gt; How is that \"bullshit\"? Please elaborate. Uttering an expletive is not a refutation.\r\n\r\nThe operative words are \"often resulting\" and I agree - this is untrue.\r\n\r\nThe standard use case for PHP is for web applications moving data from DB to HTML. The most complex data set you generally have to deal with is a list of hashes (SELECT result set). PHP addresses this \"pattern\" well with it's arrays: hashes keeping their order is useful in this context. It's also easier to represent arbitrary XML structures in PHP arrays. Within the scope of these use cases, PHP arrays behave as expected.\r\n\r\nTheres a more general point here - PHP was not intended to be a general purpose programming language but designed for the web. These days I'd argue they could do more to solve the \"web problem\" but features that make life easier for web applications include the arrays and how memory is handled (descarded after each request).\r\n\r\n&gt;&gt; \"Bad recursion support.\" Huh?\r\n\r\n&gt; Y'know, I'm not sure what that means either. I've never done recursion in PHP (it seems like a bad idea in general to do common functional paradigm stuff in PHP) aside from demonstrating a Fibonacci number generator, and haven't really read up on it, so I just wouldn't know. I should ask him about that some time.\r\n\r\nIf I remember right, the default restriction on recursion is 1024 recursive calls, after which you get an error (basically a \"safety feature\").\r\n\r\nAgain a question of use case - in generating HTML, where do you actually need recursion? Hierarchical menus. Threaded forum discussions. That's about it. Generally people solve this kind of problem using their DB - nest sets / adjancencies, reducing PHP to dealing with flat lists.\r\n\r\n&gt;&gt; PHP is thread safe. The problem is third party libraries that you can use with PHP are thread safe. The default libraries are now all thread safe. Any language that can use third party C libraries is going to have this issue.\r\n\r\n&gt; . . . which is to say, I have no idea whether it's thread safe.\r\n\r\nThe gripe here that people make is Apache 2 can have single child processes running multiple threads, thereby handling more requests. Unfortunately you're likely to have trouble here if any of the libraries (extensions) you use are non-reentrant (see my other comment you replied to) - you could have the same problem with perl, ruby or python if you're using something like GD (which probably isn't thread safe). Dig too deep here and you might find that Java or .NET are the only sensible choices.\r\n\r\n&gt;&gt; Vague and unintuitive automatic coercion; \"==\" is unpredictable\" He's got some good examples but I've never encountered them in real life. For the most part, the coercion does what it should do given that you're dealing with the web and most of your data comes in as strings.\r\n\r\n&gt; So . . . it's okay for doing certain simple numeric operations to cause your code to fall flat on its face in unexpected ways sometimes?\r\n\r\nThat doesn't happen because rarely do people attempt $y = 1 + \"foo\". The way Python handles integers / floats is far more problematic.","controversiality":0,"created_utc":1166266800,"author_flair_css_class":null,"score":0,"ups":0,"subreddit":"programming","id":"cv0i1","edited":false,"parent_id":"t1_cv02v","author_flair_text":null,"author":"harryf","retrieved_on":1473808689,"distinguished":null,"gilded":0,"timestamp_epoch":1566236770,"message_id":"32277-929d4c68-de93-4343-9b06-9ca208104ab2-1566236770"}