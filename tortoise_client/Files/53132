{"gilded":0,"distinguished":null,"retrieved_on":1473807490,"author":"ntoshev","author_flair_text":null,"edited":false,"id":"ct8l8","parent_id":"t3_t8l4","subreddit":"programming","score":5,"ups":5,"created_utc":1164988837,"author_flair_css_class":null,"controversiality":0,"body":"Most web applications currently have an architecture consisting of multiple processes that do not talk to each other. They are only talking to a database that keeps all the state of the application in a shared and persistent way. What is the difference in the paradigm offered by languages as Erlang?\r\n\r\nI understand that while the current paradigm generally works, the database becomes a weak spot for fault tolerance and scalability requirements. Erlang has a seemingly nice distributed database called Mnesia that could be a less weak spot, however applications written in Erlang seem to have the same database-dependent architecture (e.g. OpenPoker). I can see the web applications benefiting from using a good distributed database, but is there any need for concurrency beyond the database?","subreddit_id":"t5_2fwo","stickied":false,"link_id":"t3_t8l4","timestamp_epoch":1566236758,"message_id":"1341-7cb72da3-63d9-4c28-a0f1-aa637d0fa2b4-1566236758"}