{"gilded":0,"retrieved_on":1473808825,"distinguished":null,"author_flair_text":null,"author":"cot6mur3","id":"cv7pf","edited":false,"parent_id":"t1_cv4x8","subreddit":"programming","author_flair_css_class":null,"created_utc":1166451723,"score":2,"ups":2,"controversiality":0,"body":"I also disagree with the way in which Parnas concluded his article, advocating a 'do most/all design before coding' and a 'the code is not the design' philosophy of software development.\r\n\r\nHowever, I did appreciate a few points that Parnas made.  After a rather dull first page and half, he gets rolling on page 3.  In the second column of page 3, he makes a great point about many 'new' ideas in fact being rather old: \"Sometimes the introduction of new words for old ideas blocks the old literature from view.  Newcomers, entranced by OO terminology...\".\r\n\r\nMore importantly, later in the second column of page 3, Parnas emphasizes that good software can be, and _is_ created in any language: assembly, C, and Fortran, for example.  Personally, as a commercial and hobbyist programmer, I have indeed seen 'jewels' in 680x assembly, C, Java and BASIC (pre-VB!).\r\n\r\nWhat I took from his article is this: in most real-world software, few options in the choice of main programming language exist.  Nonetheless, great software can be produced, regardless of language, by focusing on design issues over language issues.\r\n\r\nAs a 9 to 5 Java coder, I can use this as a way to produce better software in my programming team of over thirty coders.","link_id":"t3_v4ik","stickied":false,"subreddit_id":"t5_2fwo","timestamp_epoch":1566236771,"message_id":"35781-181aa170-9d03-4cf4-b6ca-610fc836dbd6-1566236771"}