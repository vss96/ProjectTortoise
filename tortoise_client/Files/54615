{"parent_id":"t1_cw39x","id":"cw3kt","edited":false,"author_flair_text":null,"author":"mikaelhg","retrieved_on":1473809435,"distinguished":null,"gilded":0,"stickied":false,"link_id":"t3_w0co","subreddit_id":"t5_2fwo","controversiality":0,"body":"My experience is different. While I had to spend the last two years rearchitecting and leading the rebuilding of an Java app that could not be rehabilitated, generally the COTS/OSS libraries can be trusted to do what they promise to do, and to be maintained and documented on the long term (contrast this to Python/Ruby libraries which are often orphaned, incomplete and undocumented.)\r\n\r\nMaintenance is much cheaper than the alternatives mentioned in this thread for several reasons: a) because the platform strongly recommends a certain coding and documentation style, and mandates a basic architectural style, newbies can't really hide suprises in ways that are common in Python and Ruby, b) the platform defines several important standards which one can rely upon throughout a 5-10 year lifecycle, c) the platform includes standard ways of integrating applications to each other, and the standards are updated as the market develops new solutions, making it possible to integrate new technologies without having to write the support yourself or changing the base application, d) the platform inhibits the largest maintenance killer around, egotistical programmers developing too clever solutions to problems which would actually require a simple and robust solution which can be maintained. This is why some developers dislike the language, because it doesn't let them feel clever on the expense of the actual objectives. (See: Perl one-liners and their functional equivalents in the some of the languages mentioned in this thread.) And so on.","created_utc":1167176028,"author_flair_css_class":null,"score":1,"ups":1,"subreddit":"programming","timestamp_epoch":1566236778,"message_id":"51912-e269541a-ec86-4d40-b6d7-5ec7127f4973-1566236778"}