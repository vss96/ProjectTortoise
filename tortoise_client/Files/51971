{"id":"cu1gv","edited":false,"parent_id":"t1_cu1ci","author":"The_Bears","author_flair_text":null,"distinguished":null,"retrieved_on":1473808030,"gilded":0,"subreddit_id":"t5_2fwo","stickied":false,"link_id":"t3_u0r5","body":"&gt; Converting a method with multiple return statements into a method with a single return statement often leads to less readable code. The result is that it takes longer to understand the method with a single return statement than the original one.\r\n\r\nAgreed. This is one of those situations where there's a difference between theory and practice. If you're approaching code with the goal of formally proving its correctness, multiple returns make life a lot harder. (I think so anyway. Mercifully, it's been years since I've had to prove a program correct.) On the other hand, multiple return can make it much easier to understand the function's flow at a glance.\r\n\r\nWith that said, I tend to prefer single return in situations where resources have to be manually deallocated, such as memory in C or database connections and open files in many languages, including some garbage-collected ones. It's much easier to see that nothing is being leaked if all resources are deallocated in a single place that all code paths pass through.","controversiality":0,"ups":3,"score":3,"created_utc":1165528523,"author_flair_css_class":null,"subreddit":"programming","timestamp_epoch":1566236762,"message_id":"14672-98a12540-05a7-422e-a8e2-2d0d8663df12-1566236762"}