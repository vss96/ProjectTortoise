{"id":"ctpgg","parent_id":"t3_to4g","edited":false,"author_flair_text":null,"author":"glguy","retrieved_on":1473807808,"distinguished":null,"gilded":0,"link_id":"t3_to4g","stickied":false,"subreddit_id":"t5_2fwo","body":"This guy cracks me up: \r\n\r\n&gt; Also, the function is named\r\n&gt;\r\n&gt; `add_ints`\r\n&gt;\r\n&gt; Passing it a single argument simply confuses.\r\n&gt;\r\n&gt; Maybe you should call it `add_two_ints_and_return_an_int_unless_you_pass_in_only_one_int_in_which_case_So mething_else_happens`.\r\n&gt;\r\n&gt; Bye the way, if I go\r\n&gt;\r\n&gt; `add_ints(5);`\r\n&gt;\r\n&gt; `add_ints(6,7);` (pardon me mashing the syntax)\r\n&gt;\r\n&gt; what gets returned? `18` or `13`? And how do you know?\r\n\r\nWhile I'm willing to bet that he doesn't flinch when his Ruby function can (and does) return different types like lists, arrays, and integers based on the values of its arguments (-;\r\n\r\nI think that it might be less magical for him if he were to realize that the function always evalutates like:\r\n\r\n    (add_ints 5) 3\r\n\r\nand that it is not a conditional issue.","controversiality":0,"author_flair_css_class":null,"created_utc":1165334425,"score":9,"ups":9,"subreddit":"programming","timestamp_epoch":1566236761,"message_id":"9107-5556b9a3-df73-4cc8-b1a0-e0d5f0714dcf-1566236761"}