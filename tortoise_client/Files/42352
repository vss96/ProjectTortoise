{"subreddit":"programming","score":6,"ups":6,"created_utc":1166195784,"author_flair_css_class":null,"controversiality":0,"body":"That's close, I'm just not quite satisfied with the wording. It's probably clearer to write this with symbols.\r\n\r\n    f $ x = f x\r\n\r\nApply f to x. The only magic with $ is its low precedence, it's basically a way to avoid typing lots of parens.\r\n\r\n    (f . g) x = f (g x)\r\n\r\nThe composite function f following g.\r\n\r\nNote that ($) and (.) don't even have the same type. (.) is an operation which takes two functions and joins them end to end, ($) applies a function to a parameter.\r\n\r\nSome people use ($) in a confusing way as if it was function composition, abusing the fact that the Haskell committee got its associativity wrong. I don't recommend this. It's always possible to rewrite:\r\n\r\n    f $ g $ h $ x\r\n\r\nwhich is\r\n\r\n    f $ (g $ (h $ x))\r\n\r\nas\r\n\r\n    f . g . h $ x\r\n\r\ninstead. The advantage of this latter form is that it's easier to refactor later, because every subexpression of the composition is well-typed. For example, if I want to cut out the (g . h) and define it separately as its own function, I don't have to edit it much. It also creates the right type of thinking about functions -- you're thinking about putting functions together rather than manipulating individual pieces of data.","subreddit_id":"t5_2fwo","stickied":false,"link_id":"t3_utqb","gilded":0,"distinguished":null,"retrieved_on":1473808620,"author":"cgibbard","author_flair_text":null,"id":"cuwv8","parent_id":"t1_cuwr3","edited":false,"timestamp_epoch":1566236769,"message_id":"30542-717c3496-848d-423f-89a8-cbdd06e7787d-1566236769"}