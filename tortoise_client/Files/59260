{"author_flair_text":null,"author":"psykotic","id":"cunj9","edited":false,"parent_id":"t1_cunej","gilded":0,"distinguished":null,"retrieved_on":1473808446,"body":"The easiest way to prove the theorem constructively is to split the program into basic blocks, give each basic block a unique ID, and then put a big\r\n\r\n    while (block_id != terminal_block_id) {\r\n        if (block_id == first_block_id) { ... }\r\n        else if (block_id == second_block_id) { ... }\r\n        ...\r\n    }\r\n\r\naround the whole program; I'm assuming there are no subroutines for the sake of simplicity. You jump to a basic block by setting the block_id.\r\n\r\nFrom a high-brow functional programming point of view, the process is to CPS-convert the program, and then wrap a trampoline around it to simulate tail calls.\r\n\r\nBack when structured programming was new and wonderful, there were a lot of companies offering tools for translating legacy goto-style programs into structured-style programs. Clearly, the translation scheme I just outlined wouldn't be very suitable for such a purpose, but it should establish the theorem satisfactorily.\r\n\r\nStill unconvinced? :)","controversiality":0,"subreddit_id":"t5_2fwo","stickied":false,"link_id":"t3_u719","subreddit":"programming","score":3,"ups":3,"created_utc":1165977705,"author_flair_css_class":null,"timestamp_epoch":1566236767,"message_id":"26237-a3255aaf-f1aa-4d2b-9099-5be0bf844bdf-1566236767"}