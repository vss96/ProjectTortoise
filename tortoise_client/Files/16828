{"retrieved_on":1473807857,"distinguished":null,"gilded":0,"edited":false,"parent_id":"t1_ctqvh","id":"cts21","author":"rrenaud","author_flair_text":null,"author_flair_css_class":null,"created_utc":1165370552,"score":4,"ups":4,"subreddit":"programming","link_id":"t3_tpb9","stickied":false,"subreddit_id":"t5_2fwo","body":"I don't see how to build the graph you describe, in particular  I think the restriction that \"no substring of A has this same property\" makes it hard to build.  That said, the insight that you can restrict the search to strings of length at most n characters long gives me a solution that I am almost positive will work.  I just search on substrings produced by the rules without explicitly building the transition graph.  Maybe if I have some time later tonight I'll code it up and report if it passes or not.\r\n\r\n\r\n`dfs(cur):`\r\n\r\n   `if seen[cur]: return false`\r\n\r\n   `if cur == final: return true`\r\n\r\n   `seen[cur] = true`\r\n\r\n   `next = apply_rules(cur)`\r\n\r\n   `for each at most n_choose_2 substrings of next with length less than or equal to n:`\r\n\r\n      `if dfs(substring): return true`\r\n\r\n   `return false`\r\n","controversiality":0,"timestamp_epoch":1566236761,"message_id":"10474-cd572649-f10f-40d4-ab28-265d377bf164-1566236761"}