{"link_id":"t3_tksn","stickied":false,"subreddit_id":"t5_2fwo","body":"&gt; Every language that I know of that does garbage collection has its own GC implementation.\r\n\r\nMy point is that different CL implementations can all have their own garbage collector(s). Due to some of the language's factors it needs an efficient GC. This means you have to choose between testing on various Lisp implementations, only delivering on one implementation, or hoping that performance doesn't suffer due to differences in the GC of another Lisp implementation.\r\n\r\nFew other languages depend on their garbage collector to the same extent Lisp does *and* have such a variety of potential collectors.\r\n\r\n&gt; One gets the impression he thinks the only alternatives to Lisp are C and C++. I'm curious then, which points you think are \"very good\", and why?\r\n\r\nI guess it all depends on how you interpret this list. I inferred that this was a list of ways in which Lisp varies from \"the norm\" as defined by programming languages in popular use. By the numbers that would pretty much exclusively mean C/C++/Java. Other languages will more closely resemble Lisp[*], so this list becomes less useful in comparison there.\r\n\r\n[*] I am starting to dislike that term. Lisp is not an asymptote for other languages. I think a lot of languages are approaching a more elegant expression of computation. Other languages grow to approach Lisp only in that they gain features that Lisp already happens to have during their progression.","controversiality":0,"author_flair_css_class":null,"created_utc":1165297562,"score":2,"ups":2,"subreddit":"programming","edited":false,"id":"ctnmy","parent_id":"t1_ctmmo","author_flair_text":null,"author":"senzei","retrieved_on":1473807773,"distinguished":null,"gilded":0,"timestamp_epoch":1566236760,"message_id":"8388-ac93a3ac-5133-4a48-b343-3ef11d5ec47d-1566236760"}