{"score":1,"ups":1,"author_flair_css_class":null,"created_utc":1165085378,"subreddit":"programming","subreddit_id":"t5_2fwo","link_id":"t3_t8s1","stickied":false,"body":"Not very impressive. Of course it matters at what phase of your progamming career you are, but still, I think there are a lot better books out there.\r\n\r\nMythical Man Month, Peopleware, Rapid Development, Writing Solid Code, (an algorithms book, a data structure book), the C Programming Language. Deathmarch was also a good read. *Working with Legacy Code* is fairly high on my list, as is SICP. I would be curious about a good requirements book.\r\n\r\nI wasn't impressed with The Pragmatic Programmer, and I also don't really like the Gang of Four patterns book, but it at least has historical value. The UML book I haven't read -- if it really does a good job of dealing with OOD, okay, but otherwise I'd bump it down the reading queue.\r\n\r\nI'm part way through refactoring, and so far I'm quite disappointed. I guess a big part of it is that I come from the embedded high performance side of things, so I find most of the advice either obvious, or wrong. (For example, the guideline to avoid local variables and just always re-query things is, in my opinion, just bad in most cases. Yeah, those database accesses don't cost a thing...)","controversiality":0,"distinguished":null,"retrieved_on":1473807572,"gilded":0,"parent_id":"t3_t8s1","edited":false,"id":"ctd0h","author":"jbstjohn","author_flair_text":null,"timestamp_epoch":1566236759,"message_id":"3510-c98ef8e6-13c1-465d-b8ad-1fd09a22cc13-1566236759"}