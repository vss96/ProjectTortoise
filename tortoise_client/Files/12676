{"author":"jerf","author_flair_text":null,"parent_id":"t3_vykk","edited":false,"id":"cvys9","gilded":0,"distinguished":null,"retrieved_on":1473809344,"body":"I've been noticing a similar thing lately.\r\n\r\nI've been using Django, which uses a simple Python module to do all of its configuration, rather than a special-purpose configuration file that it reads and parses. In general, you need separate configurations on your dev box and the production box (different database info if nothing else), and after thinking about it for a bit, I realized I could add to the bottom of my settings.py:\r\n\r\n    try:\r\n        from production_settings import *\r\n    except ImportError:\r\n        pass\r\n\r\nwhich for you non-Python programmers, says that when you get to the end of the file, try to copy in all the values in production_settings.py, but if it doesn't exist, never mind.\r\n\r\nSo the production server has this file and my dev environment  doesn't and all is good.\r\n\r\nA couple of days after I did this, I was working with a conventional configuration file on another system where I was having the exact same problem, except that this configuration file _was_ a special-case data-only config file, and it occurred to me that by making the configuration file a real _program_, it enabled me to almost trivially come up with a solution to my personal problems with the full power of Python, instead of hacking on the file during deployment with Perl and a bunch of regexps, far less clean and far less safe.\r\n\r\nI can't make it a blanket statement, but I have to admit that for power user things like configuring servers, if you've got a convenient scripting language it makes a lot of sense to make the configuration files actual _scripts_ and not just dead declarations. My intuition was screaming about this initially, but the more I examine it the more sense it makes. \r\n\r\nSee also: .emacs, which just goes to show this is not a new idea.\r\n\r\n(Like I said, it's not a blanket statement. Simple config files for end-user-type programs perhaps should still be declarative, and there are some interesting issues if you need to write your configuration back out somehow. I guess I'm just saying that it's not as evil as I would have thought, or, perhaps, it _is_ evil but the real world is __more__ evil and it's worth it to be able to face the real world with a real scripting language, rather than some hacked up declarative piece of junk that quite probably can't even do what you want.)","controversiality":0,"subreddit_id":"t5_2fwo","link_id":"t3_vykk","stickied":false,"subreddit":"programming","score":5,"ups":5,"author_flair_css_class":null,"created_utc":1167025589,"timestamp_epoch":1566236777,"message_id":"49471-ee8398f5-cf84-411f-a372-d6c338e04aa0-1566236777"}