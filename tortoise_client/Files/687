{"score":4,"ups":4,"author_flair_css_class":null,"created_utc":1167182168,"subreddit":"programming","subreddit_id":"t5_2fwo","link_id":"t3_vzbb","stickied":false,"controversiality":0,"body":"Each individual index may well be smaller, but cumulatively they will be larger (although likely not substantially different: that is the beauty of this mistake... the performance trade offs are trivial for all but the special cases). The partitioning is effectively fulfilling the role of one to maybe a five top nodes in the b-tree (not exactly a RAM buster), and doing so in a far less efficient (read: unbalanced) manner.\r\n\r\nTest it out for yourself.\r\n\r\nThere are advantages for cases where you are doing table-scan level operations on one of the smaller tables (although a clustered index would accomplish the same thing more efficiently) or dropping one of the smaller tables. In general, unless the smaller tables are getting spread across spindles, the wins here are only going to be for operations that effect the majority of the records in a small subset of the tables. What he was trying to optimize was nothing like that: it was all single record operations on the larger tables. He's lucky in that all his shenanigans probably make little to no difference, but I suspect if he tried it out with a single large table he'd be a tad surprised by the results.","distinguished":null,"retrieved_on":1473809439,"gilded":0,"edited":false,"id":"cw3tp","parent_id":"t1_cw2f1","author":"xcbsmith","author_flair_text":null,"timestamp_epoch":1566236778,"message_id":"52086-40cdb377-be64-451c-9b4a-8ec09ec549d7-1566236778"}