{"subreddit":"programming","author_flair_css_class":null,"created_utc":1165090426,"score":0,"ups":0,"controversiality":0,"body":"Yes. Hitting a database server / server cluster repeatedly for information you can cache otherwise is an extremely bad way to use your resources, for all but the most trivial of applications.\r\n\r\nFor example, for my current project I wrote a simple AOP cache in 300 lines, and plugged it in to the application using Spring AOP proxies. When the coders write DAO methods they want cached, they just annotate the method with @Cacheable and one or more attribute with the @PrimaryKey(tablename) annotation. Not very difficult to comprehend, right?\r\n\r\nI could have wired a similar way of invalidating the cache, but since other applications access the database, I just put a few triggers into the database, and invalidate the caches selectively every 60 seconds from that data.\r\n\r\nThis is just a simple example of what you can accomplish if you don't try to hide your head in the sand.","link_id":"t3_t8l4","stickied":false,"subreddit_id":"t5_2fwo","gilded":0,"retrieved_on":1473807579,"distinguished":null,"author_flair_text":null,"author":"mikaelhg","id":"ctdc2","edited":false,"parent_id":"t3_t8l4","timestamp_epoch":1566236759,"message_id":"3692-4ceb87f7-100c-41aa-ad3e-90330653e518-1566236759"}