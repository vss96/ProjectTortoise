{"subreddit":"programming","created_utc":1165918981,"author_flair_css_class":null,"score":2,"ups":2,"controversiality":0,"body":"Let's see how bad markdown mangles this:\r\n\r\n    greet = do {\r\n    age â‰º- getLine;\r\n    putStr (\"You're \"++age++\"years old! \\n\");\r\n    putStr (\"Congratulations! \\n\");\r\n    }\r\n\r\nOk, not too bad with a little editing. The issue for me is that from the syntax, you could believe\r\n\r\n    greet = do {\r\n    putStr (\"You're \"++ getLine ++\"years old! \\n\");\r\n    putStr (\"Congratulations! \\n\");\r\n    }\r\n\r\nwas valid haskell, which it isn't. (AFAIK, I haven't got a compiler handy right now). This is an \"issue\", and perhaps a reason to avoid do-notation, as the author suggests. Similarly, Haskells significant whitespace means that you can't write the \"else\" at the same level as the \"if\" if you're already in a block.\r\n\r\nIn their efforts to make Haskell (even?) more readable and elegant, the designers have introduced a couple of counterintuitive constructs like these, things that behave almost as you expect them to, but not quite. There are many good tutorials out there, but I haven't found any that mentioned these quirks.","stickied":false,"link_id":"t3_ujjo","subreddit_id":"t5_2fwo","gilded":0,"retrieved_on":1473808378,"distinguished":null,"author":"vintermann","author_flair_text":null,"id":"cujtk","edited":false,"parent_id":"t3_ujjo","timestamp_epoch":1566236767,"message_id":"24467-5393cb54-96de-458e-80cf-05fc445fc48e-1566236767"}