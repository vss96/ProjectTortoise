{"stickied":false,"link_id":"t3_uvma","subreddit_id":"t5_2fwo","body":"Most of the items on this guys list are moronic.  The good points he does have are pretty well known already.\r\n\r\n\"Its object model is (still) very lacking, compared to other systems.\"\r\n\r\nJudgement call with no example.  Come on.  It's object model actually more powerful than in some other common languages.\r\n\r\n\"Namespaces don't exist at all. (this is similar to keeping all your files in one directory)\"\r\n\r\nIt has one-level of namespacing with classes, this is really all that's needed in PHP.  Sure we have to use underscores for naming instead of dots or :: but that's the only real difference.  True namespaces in PHP aren't needed.\r\n\r\n\"Exceptions didn't exist until PHP5, and aren't implemented in a useful \"deep\" fashion.\"\r\n\r\n???  Exceptions in PHP are the same as any other language.  You can even catch traditional PHP errors and throw them as exceptions (I do that).  PHP gives you the flexibility to use them or not as you desire -- this isn't terribly different from C++.\r\n\r\n\"Built-in and library APIs are a disorganized mess.\"\r\n\r\nI can completely agree on this but normally it's a non-issue.  The functions I need (and they are few) I know them.  The other functions I lookup as needed.  Sometimes it's nice that PHP has every possible function under the sun.\r\n\r\n\"Functions cannot be redefined.\"\r\n\r\nThis guy is on crack.  If functions could be redefined this guy would put it on this list!  \"Oh my god PHP sucks because you can redefine functions causing all kinds of hard to find bugs\"\r\n\r\n\"Functions cannot be nested.\"\r\n\r\nThat's not really a common or needed feature, is it?\r\n\r\n\"Anonymous functions (lambda) don't exist. create_function() is *not* the same thing.\"\r\n\r\nAnonymous (first class) functions would be nice but hardly a reason that PHP sucks. \r\n\r\n\"Functions are case insensitive.\"\r\n\r\nThe debate continues.  Case-sensitivity rules in PHP are pretty bizzare.  But it's essentially a non-issue because you should never have two functions named the same but with a different case.\r\n\r\n\"No \"doc strings\".\"\r\n\r\nI guess C++ sucks too.  This a real stretch.  I use phpdoc style comments and generate my documentation using phpDocumentator.  It's a good system, I don't see the problem.  \r\n\r\n\"The documentation...\r\n ... is often incorrect or incomplete\"\r\n\r\nI've never found the documentation to be incorrect.  It is incomplete in places, especially on the bleeding edge features of PHP5.  I mostly have to find this information out elsewhere -- which definately sucks if you are trying to make use of the new capabilities in PHP5.\r\n\r\n\"... is (as of PHP 5.1.2) not included with the source, nor typically installed along with the binary packages.\"\r\n\r\nErr..  so?\r\n\r\n\"Specifically, it leaves out all the user-contributed notes, which are important because of reasons mentioned above.\"\r\n\r\nNo it doesn't.  Even my downloaded CHM (Windows help) documentation has the user-contributed notes.  In fact, I love that the PHP documentation comes in so many formats.\r\n\r\n\"You can't just point an introspection tool at a PHP module and get usage information from it.\"\r\n\r\nI thought this was a list about what sucks about PHP -- this guy is going *way* out to find issues.  Most languages don't do this. \r\n\r\n\"Default to pass-by-value.\"\r\n\r\nFixed in PHP5 -- That's almost the sole reason that PHP5 exists!\r\n\r\n\"Default error behavior is to send cryptic messages to the browser, mid-page, instead of logging a traceback for the developer to investigate.\"\r\n\r\nActually the default error behavior is to do nothing at all.  Equally bad.  But displaying errors mid-page is very useful for beginning developers and seasoned developers do their own error handling.  This isn't terribly different from most other languages -- how many times have I seen Java spew a stack trace!\r\n\r\n\"Many errors are silent. For example, accessing a nonexistent variable simply returns nothing.\"\r\n\r\n..not silent.  That raises a notice.  Whether or not you choose to care about notices is up to you.  I believe the default is to display notices.  I treat all notices as an error and raise an exception.\r\n\r\n\"The combination list/hash type causes problems by oversimplifying, often resulting in unexpected/unintuitive behavior.\"\r\n\r\nBullshit.\r\n\r\n\"Awkward / overlapping names can exist... foo and $foo are completely unrelated.\"\r\n\r\nAnd in C++ you can have a function named foo, a class named foo, a variable named foo, etc..  again, this list is fucked up.\r\n\r\n\"Magic quotes (and related mis-features) make data input needlessly complex and error-prone.\"\r\n\r\nMagic quotes are moronic, totally 100% agreed.  Finally a good point after a long list of BS ones.  I believe they are turned off by default but I have, even recently, come across situations where it's enabled -- boggles the mind really.\r\n\r\n\"The server-wide settings in PHP's configuration add a lot of complexity to app code, requiring all sorts of checks and workarounds.\"\r\n\r\nAgreed.  But you can still code the lowest-common denominator and avoid these problems.  In fact, that is what Zend recommends you do.  Don't count on settings being enabled.  This is mostly for backwards compatibility anyway.\r\n\r\n\"The performance is crippled for commercial reasons (zend). Free optimizers are available, but aren't default or standard.\"\r\n\r\nAlso good point although Zend developers do work on APC and the next version will have caching built in.\r\n\r\n\"Bad recursion support.\"\r\n\r\nHuh?\r\n\r\n\"Not thread safe.\"\r\n\r\nPHP is thread safe.  The problem is third party libraries that you can use with PHP are thread safe.  The default libraries are now all thread safe.  Any language that can use third party C libraries is going to have this issue.\r\n\r\n\"Vague and unintuitive automatic coercion; \"==\" is unpredictable\"\r\n\r\nHe's got some good examples but I've never encountered them in real life.  For the most part, the coercion does what it should do given that you're dealing with the web and most of your data comes in as strings.\r\n\r\n\"Variable scoping is strange, inconsistent, and inconvenient\"\r\n\r\nIt's not inconsistent but it is strange.  But honestly, in PHP5, globals just aren't needed anymore.  Nobody should be using global variables and it's actually good that PHP makes you spell it out in detail.\r\n\r\n\"The mixture of PHP code with HTML markup tends to make code difficult to read. Readability is important.\"\r\n\r\nSo don't.  Not a fault of PHP.  You can mix code and HTML in just about any language.  But teaching PHP to beginners it much easier to let them mix it in than try and explain how to use a templating engine.\r\n\r\n\"It provides no way to log errors verbosely, but only display critical errors to the user.\"\r\n\r\nI log errors verbosely.  Fatal errors unfortunately cannot be logged because they are fatal -- no further execution is possible.  However, I've managed to get a nice pretty error page for critical errors and let users email it to me.  This level of critical error must exist in other languages too.\r\n\r\n\"Further, some of the most critical errors (such as running out of memory) give absolutely no response to the user -- not even a blank page.\"\r\n\r\nRunning out of memory isn't very common.  I don't know how other languages handle this but I doubt many do it any better.\r\n\r\n\"Poor security, and poor response to security issues.\"\r\n\r\nI blame the user.  Earlier version of PHP did some nasty stuff (register_globals) that cause all kinds of problems.  But none of the problems that exist now don't exist in other languages.  PHP does make everything either and so that does include exploits.  That doesn't mean it's less secure, just more capible.\r\n\r\n\"Most of the development since v3 seems to be devoted to damage control, and dealing with earlier mistakes... not a good sign.\"\r\n\r\nNow this is an interesting point.  I'd counter it by saying that PHP has always been about getting things done.  It's no elegant but it works.  It may never have been used if they had waited to perfect every little piece.  But the pace of PHP development is fast and their concern for backwards compatibility is good and they do fix their mistakes.  I think it's a good thing.\r\n","controversiality":1,"created_utc":1166214019,"author_flair_css_class":null,"ups":-4,"score":-4,"subreddit":"programming","edited":false,"parent_id":"t3_uvma","id":"cuyey","author_flair_text":null,"author":"almostalive","retrieved_on":1473808649,"distinguished":null,"gilded":0,"timestamp_epoch":1566236769,"message_id":"31296-d9524dd6-db6a-46b1-a676-83711292fece-1566236769"}