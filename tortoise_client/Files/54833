{"score":0,"ups":0,"author_flair_css_class":null,"created_utc":1167418961,"subreddit":"programming","subreddit_id":"t5_2fwo","link_id":"t3_wcxk","stickied":false,"controversiality":0,"body":"&gt; Java always tried to went they way of 'no surprises' by making as much as possible explicit. They left this way by creating auto-boxing/unboxing, which was IMO a really bad idea, even it it is quite convenient.\r\n\r\nI see where you are coming from, but I don't belive that Java can continue to strive for explicitness and still maintain its position.\r\n\r\nIf Java is going to continue to be relevant, conveniance is going to have to take a priority. Combining query comprehension with tradition OO langauges is the next Big Thing (tm). And unlike AOP, it looks like it really is going to catch on. But that means a heck of a lot more magic has to be allowed under the covers.\r\n\r\n&gt; But if they allow to use the '.'-syntax for properties, something like 'x.blah' could start computations which may take seconds.\r\n\r\nI think that can be handled as a training issue. Java developers are already taught, to some extent, not to do expensive operations in getX/setX methods.\r\n","distinguished":null,"retrieved_on":1473809629,"gilded":0,"id":"cwdtj","parent_id":"t1_cwdql","edited":false,"author":"grauenwolf","author_flair_text":null,"timestamp_epoch":1566236779,"message_id":"57227-68d965a9-67c5-4d76-9592-fdc7a1e02296-1566236779"}